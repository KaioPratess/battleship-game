(() => {
  const r = {
    426: (r, e, n) => {
      n.d(e, { Z: () => s }); const t = n(537); const i = n.n(t); const a = n(645); const o = n.n(a)()(i()); o.push([r.id, "* {\r\n  margin: 0;\r\n  padding: 0;\r\n  box-sizing: border-box;\r\n  font-family: 'PROBE10PXRegular';\r\n}\r\n\r\nbody {\r\n  display: flex;\r\n  gap: 60px;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  background: #0f0c29;  /* fallback for old browsers */\r\n  background: -webkit-linear-gradient(to right, #24243e, #302b63, #0f0c29);  /* Chrome 10-25, Safari 5.1-6 */\r\n  background: linear-gradient(to right, #24243e, #302b63, #0f0c29); /* W3C, IE 10+/ Edge, Firefox 16+, Chrome 26+, Opera 12+, Safari 7+ */\r\n}\r\n\r\nh1 {\r\n  text-transform: uppercase;\r\n  text-shadow: 3px 3px 3px black;\r\n  font-size: 6.25rem;\r\n  color: white;\r\n  user-select: none;\r\n}\r\n\r\n.game-container {\r\n  display: flex;\r\n  gap: 100px;\r\n  margin-bottom: 50px;\r\n}\r\n\r\n.game-container > div {\r\n  display: grid;\r\n  justify-items: center;\r\n  gap: 10px;\r\n}\r\n\r\n\r\n.game-container > div p {\r\n  font-size: 1.5rem;\r\n  color: white;\r\n  text-transform: capitalize;\r\n  user-select: none;\r\n}\r\n\r\n.square {\r\n  width: 50px;\r\n  height: 50px;\r\n  border: 1px solid rgba(0, 100, 255, 1);\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  background-color: lightblue;\r\n}\r\n\r\n.grid-1, .grid-2 {\r\n  display: grid;\r\n  grid-template-columns: repeat(10, 1fr);\r\n}\r\n\r\n.reset-game {\r\n  width: 100vw;\r\n  height: 100%;\r\n  background-color: rgba(255, 255, 255, .5);\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  gap: 20px;\r\n  display: none;\r\n}\r\n\r\n.game-result {\r\n  font-size: 3rem;\r\n}\r\n\r\n.restart-btn {\r\n  padding: 8px 24px;\r\n  font-size: 1.125rem;\r\n  border: none;\r\n  cursor: pointer;\r\n  color: white;\r\n  background-color: black;\r\n  border-radius: 12px;\r\n}\r\n\r\n/* initial screen */\r\n.initial-screen-bg {\r\n  width: 100%;\r\n  height: 100vh;\r\n  position: fixed;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  background: #0f0c29;  /* fallback for old browsers */\r\n  background: -webkit-linear-gradient(to right, #24243e, #302b63, #0f0c29);  /* Chrome 10-25, Safari 5.1-6 */\r\n  background: linear-gradient(to right, #24243e, #302b63, #0f0c29); /* W3C, IE 10+/ Edge, Firefox 16+, Chrome 26+, Opera 12+, Safari 7+ */\r\n  \r\n}\r\n\r\n.initial-screen {\r\n  width: 800px;\r\n  height: 100vh;\r\n  background: #0f0c29;  /* fallback for old browsers */\r\n  background: -webkit-linear-gradient(to right, #24243e, #302b63, #0f0c29);  /* Chrome 10-25, Safari 5.1-6 */\r\n  background: linear-gradient(to right, #24243e, #302b63, #0f0c29); /* W3C, IE 10+/ Edge, Firefox 16+, Chrome 26+, Opera 12+, Safari 7+ */\r\n  \r\n  padding: 20px;\r\n  position: absolute;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  gap: 15px;\r\n}\r\n\r\n.initial-screen h2 {\r\n  text-transform: uppercase;\r\n  font-size: 2rem;\r\n  color: white;\r\n}\r\n\r\n.initial-screen p {\r\n  font-family: 'PROBE10PXRegular';\r\n  font-size: 1.5rem;\r\n  color: white;\r\n}\r\n\r\n.positioning-div {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 50px;\r\n}\r\n\r\n.y {\r\n  transform: rotate(90deg);\r\n}\r\n\r\n.x {\r\n  transform: rotate(360deg);\r\n}\r\n\r\n.initial-grid {\r\n  display: grid;\r\n  grid-template-columns: repeat(10, 1fr);\r\n}\r\n\r\n\r\n.initial-grid .square {\r\n  width: 40px;\r\n  height: 40px;\r\n  border: 1px solid rgba(0, 100, 255, 1);\r\n  background: lightblue;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n}\r\n\r\n.start-btn,\r\n.randomize-btn,\r\n.reset-btn,\r\n.rotate-btn {\r\n  padding: 8px 0;\r\n  width: 144px;\r\n  font-size: 1.125rem;\r\n  cursor: pointer;\r\n}\r\n\r\n.ships {\r\n  display: grid;\r\n  gap: 10px;\r\n}\r\n\r\n.ship {\r\n  height: 40px;\r\n  background-color: darkgrey;\r\n  cursor: grab;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  font-size: 1.25rem;\r\n}\r\n\r\n#pcarrier {\r\n  width: calc(40px * 5);\r\n}\r\n\r\n#pbattleship {\r\n  width: calc(40px * 4);\r\n}\r\n\r\n#pdestroyer {\r\n  width: calc(40px * 3);\r\n}\r\n\r\n#psubmarine {\r\n  width: calc(40px * 3);\r\n}\r\n\r\n#ppatrol {\r\n  width: calc(40px * 2);\r\n}\r\n\r\n.footer {\r\n  padding-bottom: 20px;\r\n}\r\n\r\n.footer p {\r\n  font-size: 1.25rem;\r\n  color: white;\r\n}\r\n", '', {
        version: 3, sources: ['webpack://./src/style.css'], names: [], mappings: 'AAAA;EACE,SAAS;EACT,UAAU;EACV,sBAAsB;EACtB,+BAA+B;AACjC;;AAEA;EACE,aAAa;EACb,SAAS;EACT,sBAAsB;EACtB,mBAAmB;EACnB,mBAAmB,GAAG,8BAA8B;EACpD,wEAAwE,GAAG,+BAA+B;EAC1G,gEAAgE,EAAE,qEAAqE;AACzI;;AAEA;EACE,yBAAyB;EACzB,8BAA8B;EAC9B,kBAAkB;EAClB,YAAY;EACZ,iBAAiB;AACnB;;AAEA;EACE,aAAa;EACb,UAAU;EACV,mBAAmB;AACrB;;AAEA;EACE,aAAa;EACb,qBAAqB;EACrB,SAAS;AACX;;;AAGA;EACE,iBAAiB;EACjB,YAAY;EACZ,0BAA0B;EAC1B,iBAAiB;AACnB;;AAEA;EACE,WAAW;EACX,YAAY;EACZ,sCAAsC;EACtC,aAAa;EACb,uBAAuB;EACvB,mBAAmB;EACnB,2BAA2B;AAC7B;;AAEA;EACE,aAAa;EACb,sCAAsC;AACxC;;AAEA;EACE,YAAY;EACZ,YAAY;EACZ,yCAAyC;EACzC,eAAe;EACf,MAAM;EACN,OAAO;EACP,aAAa;EACb,sBAAsB;EACtB,uBAAuB;EACvB,mBAAmB;EACnB,SAAS;EACT,aAAa;AACf;;AAEA;EACE,eAAe;AACjB;;AAEA;EACE,iBAAiB;EACjB,mBAAmB;EACnB,YAAY;EACZ,eAAe;EACf,YAAY;EACZ,uBAAuB;EACvB,mBAAmB;AACrB;;AAEA,mBAAmB;AACnB;EACE,WAAW;EACX,aAAa;EACb,eAAe;EACf,aAAa;EACb,uBAAuB;EACvB,mBAAmB;EACnB,mBAAmB,GAAG,8BAA8B;EACpD,wEAAwE,GAAG,+BAA+B;EAC1G,gEAAgE,EAAE,qEAAqE;;AAEzI;;AAEA;EACE,YAAY;EACZ,aAAa;EACb,mBAAmB,GAAG,8BAA8B;EACpD,wEAAwE,GAAG,+BAA+B;EAC1G,gEAAgE,EAAE,qEAAqE;;EAEvI,aAAa;EACb,kBAAkB;EAClB,aAAa;EACb,sBAAsB;EACtB,mBAAmB;EACnB,SAAS;AACX;;AAEA;EACE,yBAAyB;EACzB,eAAe;EACf,YAAY;AACd;;AAEA;EACE,+BAA+B;EAC/B,iBAAiB;EACjB,YAAY;AACd;;AAEA;EACE,aAAa;EACb,mBAAmB;EACnB,SAAS;AACX;;AAEA;EACE,wBAAwB;AAC1B;;AAEA;EACE,yBAAyB;AAC3B;;AAEA;EACE,aAAa;EACb,sCAAsC;AACxC;;;AAGA;EACE,WAAW;EACX,YAAY;EACZ,sCAAsC;EACtC,qBAAqB;EACrB,aAAa;EACb,uBAAuB;EACvB,mBAAmB;AACrB;;AAEA;;;;EAIE,cAAc;EACd,YAAY;EACZ,mBAAmB;EACnB,eAAe;AACjB;;AAEA;EACE,aAAa;EACb,SAAS;AACX;;AAEA;EACE,YAAY;EACZ,0BAA0B;EAC1B,YAAY;EACZ,aAAa;EACb,uBAAuB;EACvB,mBAAmB;EACnB,kBAAkB;AACpB;;AAEA;EACE,qBAAqB;AACvB;;AAEA;EACE,qBAAqB;AACvB;;AAEA;EACE,qBAAqB;AACvB;;AAEA;EACE,qBAAqB;AACvB;;AAEA;EACE,qBAAqB;AACvB;;AAEA;EACE,oBAAoB;AACtB;;AAEA;EACE,kBAAkB;EAClB,YAAY;AACd', sourcesContent: ["* {\r\n  margin: 0;\r\n  padding: 0;\r\n  box-sizing: border-box;\r\n  font-family: 'PROBE10PXRegular';\r\n}\r\n\r\nbody {\r\n  display: flex;\r\n  gap: 60px;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  background: #0f0c29;  /* fallback for old browsers */\r\n  background: -webkit-linear-gradient(to right, #24243e, #302b63, #0f0c29);  /* Chrome 10-25, Safari 5.1-6 */\r\n  background: linear-gradient(to right, #24243e, #302b63, #0f0c29); /* W3C, IE 10+/ Edge, Firefox 16+, Chrome 26+, Opera 12+, Safari 7+ */\r\n}\r\n\r\nh1 {\r\n  text-transform: uppercase;\r\n  text-shadow: 3px 3px 3px black;\r\n  font-size: 6.25rem;\r\n  color: white;\r\n  user-select: none;\r\n}\r\n\r\n.game-container {\r\n  display: flex;\r\n  gap: 100px;\r\n  margin-bottom: 50px;\r\n}\r\n\r\n.game-container > div {\r\n  display: grid;\r\n  justify-items: center;\r\n  gap: 10px;\r\n}\r\n\r\n\r\n.game-container > div p {\r\n  font-size: 1.5rem;\r\n  color: white;\r\n  text-transform: capitalize;\r\n  user-select: none;\r\n}\r\n\r\n.square {\r\n  width: 50px;\r\n  height: 50px;\r\n  border: 1px solid rgba(0, 100, 255, 1);\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  background-color: lightblue;\r\n}\r\n\r\n.grid-1, .grid-2 {\r\n  display: grid;\r\n  grid-template-columns: repeat(10, 1fr);\r\n}\r\n\r\n.reset-game {\r\n  width: 100vw;\r\n  height: 100%;\r\n  background-color: rgba(255, 255, 255, .5);\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  gap: 20px;\r\n  display: none;\r\n}\r\n\r\n.game-result {\r\n  font-size: 3rem;\r\n}\r\n\r\n.restart-btn {\r\n  padding: 8px 24px;\r\n  font-size: 1.125rem;\r\n  border: none;\r\n  cursor: pointer;\r\n  color: white;\r\n  background-color: black;\r\n  border-radius: 12px;\r\n}\r\n\r\n/* initial screen */\r\n.initial-screen-bg {\r\n  width: 100%;\r\n  height: 100vh;\r\n  position: fixed;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  background: #0f0c29;  /* fallback for old browsers */\r\n  background: -webkit-linear-gradient(to right, #24243e, #302b63, #0f0c29);  /* Chrome 10-25, Safari 5.1-6 */\r\n  background: linear-gradient(to right, #24243e, #302b63, #0f0c29); /* W3C, IE 10+/ Edge, Firefox 16+, Chrome 26+, Opera 12+, Safari 7+ */\r\n  \r\n}\r\n\r\n.initial-screen {\r\n  width: 800px;\r\n  height: 100vh;\r\n  background: #0f0c29;  /* fallback for old browsers */\r\n  background: -webkit-linear-gradient(to right, #24243e, #302b63, #0f0c29);  /* Chrome 10-25, Safari 5.1-6 */\r\n  background: linear-gradient(to right, #24243e, #302b63, #0f0c29); /* W3C, IE 10+/ Edge, Firefox 16+, Chrome 26+, Opera 12+, Safari 7+ */\r\n  \r\n  padding: 20px;\r\n  position: absolute;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  gap: 15px;\r\n}\r\n\r\n.initial-screen h2 {\r\n  text-transform: uppercase;\r\n  font-size: 2rem;\r\n  color: white;\r\n}\r\n\r\n.initial-screen p {\r\n  font-family: 'PROBE10PXRegular';\r\n  font-size: 1.5rem;\r\n  color: white;\r\n}\r\n\r\n.positioning-div {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 50px;\r\n}\r\n\r\n.y {\r\n  transform: rotate(90deg);\r\n}\r\n\r\n.x {\r\n  transform: rotate(360deg);\r\n}\r\n\r\n.initial-grid {\r\n  display: grid;\r\n  grid-template-columns: repeat(10, 1fr);\r\n}\r\n\r\n\r\n.initial-grid .square {\r\n  width: 40px;\r\n  height: 40px;\r\n  border: 1px solid rgba(0, 100, 255, 1);\r\n  background: lightblue;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n}\r\n\r\n.start-btn,\r\n.randomize-btn,\r\n.reset-btn,\r\n.rotate-btn {\r\n  padding: 8px 0;\r\n  width: 144px;\r\n  font-size: 1.125rem;\r\n  cursor: pointer;\r\n}\r\n\r\n.ships {\r\n  display: grid;\r\n  gap: 10px;\r\n}\r\n\r\n.ship {\r\n  height: 40px;\r\n  background-color: darkgrey;\r\n  cursor: grab;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  font-size: 1.25rem;\r\n}\r\n\r\n#pcarrier {\r\n  width: calc(40px * 5);\r\n}\r\n\r\n#pbattleship {\r\n  width: calc(40px * 4);\r\n}\r\n\r\n#pdestroyer {\r\n  width: calc(40px * 3);\r\n}\r\n\r\n#psubmarine {\r\n  width: calc(40px * 3);\r\n}\r\n\r\n#ppatrol {\r\n  width: calc(40px * 2);\r\n}\r\n\r\n.footer {\r\n  padding-bottom: 20px;\r\n}\r\n\r\n.footer p {\r\n  font-size: 1.25rem;\r\n  color: white;\r\n}\r\n"], sourceRoot: '',
      }]); const s = o;
    },
    645: (r) => { r.exports = function (r) { const e = []; return e.toString = function () { return this.map(((e) => { let n = ''; const t = void 0 !== e[5]; return e[4] && (n += '@supports ('.concat(e[4], ') {')), e[2] && (n += '@media '.concat(e[2], ' {')), t && (n += '@layer'.concat(e[5].length > 0 ? ' '.concat(e[5]) : '', ' {')), n += r(e), t && (n += '}'), e[2] && (n += '}'), e[4] && (n += '}'), n; })).join(''); }, e.i = function (r, n, t, i, a) { typeof r === 'string' && (r = [[null, r, void 0]]); const o = {}; if (t) for (let s = 0; s < this.length; s++) { const A = this[s][0]; A != null && (o[A] = !0); } for (let l = 0; l < r.length; l++) { const c = [].concat(r[l]); t && o[c[0]] || (void 0 !== a && (void 0 === c[5] || (c[1] = '@layer'.concat(c[5].length > 0 ? ' '.concat(c[5]) : '', ' {').concat(c[1], '}')), c[5] = a), n && (c[2] ? (c[1] = '@media '.concat(c[2], ' {').concat(c[1], '}'), c[2] = n) : c[2] = n), i && (c[4] ? (c[1] = '@supports ('.concat(c[4], ') {').concat(c[1], '}'), c[4] = i) : c[4] = ''.concat(i)), e.push(c)); } }, e; }; },
    537: (r) => { r.exports = function (r) { const e = r[1]; const n = r[3]; if (!n) return e; if (typeof btoa === 'function') { const t = btoa(unescape(encodeURIComponent(JSON.stringify(n)))); const i = 'sourceMappingURL=data:application/json;charset=utf-8;base64,'.concat(t); const a = '/*# '.concat(i, ' */'); const o = n.sources.map(((r) => '/*# sourceURL='.concat(n.sourceRoot || '').concat(r, ' */'))); return [e].concat(o).concat([a]).join('\n'); } return [e].join('\n'); }; },
    379: (r) => {
      const e = []; function n(r) { for (var n = -1, t = 0; t < e.length; t++) if (e[t].identifier === r) { n = t; break; } return n; } function t(r, t) {
        for (var a = {}, o = [], s = 0; s < r.length; s++) {
          const A = r[s]; const l = t.base ? A[0] + t.base : A[0]; const c = a[l] || 0; const d = ''.concat(l, ' ').concat(c); a[l] = c + 1; const p = n(d); const u = {
            css: A[1], media: A[2], sourceMap: A[3], supports: A[4], layer: A[5],
          }; if (p !== -1)e[p].references++, e[p].updater(u); else { const g = i(u, t); t.byIndex = s, e.splice(s, 0, { identifier: d, updater: g, references: 1 }); }o.push(d);
        } return o;
      } function i(r, e) { const n = e.domAPI(e); return n.update(r), function (e) { if (e) { if (e.css === r.css && e.media === r.media && e.sourceMap === r.sourceMap && e.supports === r.supports && e.layer === r.layer) return; n.update(r = e); } else n.remove(); }; }r.exports = function (r, i) { let a = t(r = r || [], i = i || {}); return function (r) { r = r || []; for (let o = 0; o < a.length; o++) { const s = n(a[o]); e[s].references--; } for (var A = t(r, i), l = 0; l < a.length; l++) { const c = n(a[l]); e[c].references === 0 && (e[c].updater(), e.splice(c, 1)); }a = A; }; };
    },
    569: (r) => { const e = {}; r.exports = function (r, n) { const t = (function (r) { if (void 0 === e[r]) { let n = document.querySelector(r); if (window.HTMLIFrameElement && n instanceof window.HTMLIFrameElement) try { n = n.contentDocument.head; } catch (r) { n = null; }e[r] = n; } return e[r]; }(r)); if (!t) throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid."); t.appendChild(n); }; },
    216: (r) => { r.exports = function (r) { const e = document.createElement('style'); return r.setAttributes(e, r.attributes), r.insert(e, r.options), e; }; },
    565: (r, e, n) => { r.exports = function (r) { const e = n.nc; e && r.setAttribute('nonce', e); }; },
    795: (r) => { r.exports = function (r) { const e = r.insertStyleElement(r); return { update(n) { !(function (r, e, n) { let t = ''; n.supports && (t += '@supports ('.concat(n.supports, ') {')), n.media && (t += '@media '.concat(n.media, ' {')); const i = void 0 !== n.layer; i && (t += '@layer'.concat(n.layer.length > 0 ? ' '.concat(n.layer) : '', ' {')), t += n.css, i && (t += '}'), n.media && (t += '}'), n.supports && (t += '}'); const a = n.sourceMap; a && typeof btoa !== 'undefined' && (t += '\n/*# sourceMappingURL=data:application/json;base64,'.concat(btoa(unescape(encodeURIComponent(JSON.stringify(a)))), ' */')), e.styleTagTransform(t, r, e.options); }(e, r, n)); }, remove() { !(function (r) { if (r.parentNode === null) return !1; r.parentNode.removeChild(r); }(e)); } }; }; },
    589: (r) => { r.exports = function (r, e) { if (e.styleSheet)e.styleSheet.cssText = r; else { for (;e.firstChild;)e.removeChild(e.firstChild); e.appendChild(document.createTextNode(r)); } }; },
  }; const e = {}; function n(t) { const i = e[t]; if (void 0 !== i) return i.exports; const a = e[t] = { id: t, exports: {} }; return r[t](a, a.exports, n), a.exports; }n.n = (r) => { const e = r && r.__esModule ? () => r.default : () => r; return n.d(e, { a: e }), e; }, n.d = (r, e) => { for (const t in e)n.o(e, t) && !n.o(r, t) && Object.defineProperty(r, t, { enumerable: !0, get: e[t] }); }, n.o = (r, e) => Object.prototype.hasOwnProperty.call(r, e), n.r = (r) => { typeof Symbol !== 'undefined' && Symbol.toStringTag && Object.defineProperty(r, Symbol.toStringTag, { value: 'Module' }), Object.defineProperty(r, '__esModule', { value: !0 }); }, n.nc = void 0, (() => {
    const r = {}; n.r(r), n.d(r, {
      mbattleship: () => b, mcarrier: () => E, mdestroyer: () => C, mpatrol: () => x, msubmarine: () => B, pbattleship: () => v, pcarrier: () => y, pdestroyer: () => k, ppatrol: () => S, psubmarine: () => w,
    }); const e = n(379); const t = n.n(e); const i = n(795); const a = n.n(i); const o = n(569); const s = n.n(o); const A = n(565); const l = n.n(A); const c = n(216); const d = n.n(c); const p = n(589); const u = n.n(p); const g = n(426); const m = {}; m.styleTagTransform = u(), m.setAttributes = l(), m.insert = s().bind(null, 'head'), m.domAPI = a(), m.insertStyleElement = d(), t()(g.Z, m), g.Z && g.Z.locals && g.Z.locals; const f = {
      events: {}, subscribe(r, e, n) { this.events[r] = this.events[r] || [], this.events[r].push({ object: e, callback: n }); }, unsubscribe(r, e, n) { if (this.events[r]) for (let n = 0; n < this.events[r].length; n++) if (this.events[r][n].object === e) { this.events[r].splice(n, 1); break; } }, publish(r, e) { this.events[r] && this.events[r].forEach(((r) => { r.callback(e); })); },
    }; function h(r, e) {
      const n = r; const t = []; let i = !1; return {
        hit: () => { t.length < e && (t.push('hit'), console.log(t, n), t.length === e && t.every(((r) => r === 'hit')) && (i = !0, f.publish('sunk', n))); }, length: t, sunk: i, name: n,
      };
    } const E = h('mcarrier', 5); const b = h('mbattleship', 4); const C = h('mdestroyer', 3); const B = h('msubmarine', 3); const x = h('mpatrol', 2); const y = h('pcarrier', 5); const v = h('pbattleship', 4); const k = h('pdestroyer', 3); const w = h('psubmarine', 3); const S = h('ppatrol', 2); const q = function () { const e = new Array(10).fill(0).map((() => new Array(10).fill(0))); const n = (r, e, t, i) => { const a = Math.floor(10 * Math.random()); const o = Math.floor(10 * Math.random()); if (r[a][o] === 0) if (i === 'x' && t + o <= r[a].length) { const s = []; for (let e = o; e <= t + o - 1; e++)r[a][e] === 0 && s.push(0); if (s.length === t && s.every(((r) => r === 0))) for (let n = o; n <= t + o - 1; n++)r[a][n] = e; else n(r, e, t, i); } else if (i === 'y' && t + a <= r.length) { const s = []; for (let e = a; e <= t + a - 1; e++)r[e][o] === 0 && s.push(0); if (s.length === t && s.every(((r) => r === 0))) for (let n = a; n <= t + a - 1; n++)r[n][o] = e; else n(r, e, t, i); } else n(r, e, t, i); else n(r, e, t, i); }; const t = []; const i = []; return f.subscribe('sunk', f.events, ((r) => { r.slice(0, 1) === 'p' ? t.push(r) : r.slice(0, 1) === 'm' && i.push(r), t.length === 5 ? (z.select.gameResultH2.textContent = 'You lost! The machine beat you', z.select.resetGameDiv.style.display = 'flex') : i.length === 5 && (z.select.resetGameDiv.style.display = 'flex', z.select.gameResultH2.textContent = 'Congrats! You beat the Machine'); })), { placeShip: n, receiveAttack: (e, n, t, i) => { const a = e[n][t]; a !== 0 && a !== 1 ? (r[a].hit(), i.forEach(((r) => { const e = r.getAttribute('data-line'); const i = r.getAttribute('data-col'); e == n && i == t && (r.style.background = 'red'); }))) : (e[n][t] = 1, i.forEach(((r) => { const e = r.getAttribute('data-line'); const i = r.getAttribute('data-col'); e == n && i == t && (r.style.background = 'blue'); }))); }, matrix: e }; }; const z = (function () {
      const r = {
        grid1Div: document.querySelector('.grid-1'), grid2Div: document.querySelector('.grid-2'), resetGameDiv: document.querySelector('.reset-game'), gameResultH2: document.querySelector('.game-result'), restartButton: document.querySelector('.restart-btn'), ships: document.querySelectorAll('.ship'), shipsDiv: document.querySelector('.ships'), initialGrid: document.querySelector('.initial-grid'), randomBtn: document.querySelector('.randomize-btn'), resetBtn: document.querySelector('.reset-btn'), rotateBtn: document.querySelector('.rotate-btn'), startBtn: document.querySelector('.start-btn'), initialBg: document.querySelector('.initial-screen-bg'),
      }; return { select: r, renderBoard(e, n, t, i) { r.grid1Div.textContent = ''; for (let r = 0; r < e.length; r++) for (let a = 0; a < e[r].length; a++) { const o = document.createElement('div'); o.classList.add('square'), o.setAttribute('data-coord', `${r}${a}`), o.setAttribute('data-line', r), o.setAttribute('data-col', a), n.append(o), t === 'player' || t === 'initial' ? (i.push(o), e[r][a] !== 'pcarrier' && e[r][a] !== 'pbattleship' && e[r][a] !== 'pdestroyer' && e[r][a] !== 'psubmarine' && e[r][a] !== 'ppatrol' || (o.style.background = 'grey')) : t === 'machine' && i.push(o); } } };
    }()); const Y = (z.select.restartButton.addEventListener('click', (() => { window.location.reload(); })), { newGame: (r) => { const e = r; const n = q(); const t = []; const i = []; n.placeShip(n.matrix, 'mcarrier', 5, 'x'), n.placeShip(n.matrix, 'mbattleship', 4, 'y'), n.placeShip(n.matrix, 'mdestroyer', 3, 'x'), n.placeShip(n.matrix, 'msubmarine', 3, 'x'), n.placeShip(n.matrix, 'mpatrol', 2, 'x'), z.renderBoard(n.matrix, z.select.grid2Div, 'machine', i), z.renderBoard(e.matrix, z.select.grid1Div, 'player', t), i.forEach(((r) => { r.style.cursor = 'crosshair', r.addEventListener('mouseenter', (() => { const e = +r.getAttribute('data-line'); const t = +r.getAttribute('data-col'); const { background: i } = r.style; n.matrix[e][t] !== 1 && i !== 'blue' && i !== 'red' || (r.style.cursor = 'not-allowed', console.log('occupied')); })), r.addEventListener('click', (() => { const e = +r.getAttribute('data-line'); const t = +r.getAttribute('data-col'); const { background: a } = r.style; n.matrix[e][t] !== 1 && a !== 'grey' && a !== 'red' && (f.publish('machineTurn', ''), n.receiveAttack(n.matrix, e, t, i)); })); })); const a = { randomPlay: (r) => { let e = Math.floor(10 * Math.random()); let n = Math.floor(10 * Math.random()); let t = r[e][n]; if (t === 'hit' || t === 1) { for (;t === 'hit' || t === 1;)e = Math.floor(10 * Math.random()), n = Math.floor(10 * Math.random()), t = r[e][n]; t === 'pcarrier' || t === 'pbattleship' || t === 'pdestroyer' || t === 'psubmarine' || t === 'ppatrol' ? (f.publish('attack', { rLine: e, rCol: n }), r[e][n] = 'hit') : t === 0 && (f.publish('attack', { rLine: e, rCol: n }), r[e][n] = 1); } else t === 'pcarrier' || t === 'pbattleship' || t === 'pdestroyer' || t === 'psubmarine' || t === 'ppatrol' ? (f.publish('attack', { rLine: e, rCol: n }), r[e][n] = 'hit') : t === 0 && (f.publish('attack', { rLine: e, rCol: n }), r[e][n] = 1); } }; f.subscribe('machineTurn', f.events, (() => { a.randomPlay(e.matrix); })), f.subscribe('attack', f.events, ((r) => { e.receiveAttack(e.matrix, r.rLine, r.rCol, t); })); } }); !(function () { const r = q(); const e = []; z.renderBoard(r.matrix, z.select.initialGrid, 'initial', e); let n; let t = 0; let i = 'x'; function a(r, e) { return Math.floor(Math.random() * (e - r + 1)) + r; }z.select.randomBtn.addEventListener('click', ((n) => { for (let e = 0; e < r.matrix.length; e++) for (let n = 0; n < r.matrix[e].length; n++)r.matrix[e][n] = 0; z.select.initialGrid.textContent = ''; const t = ['x', 'y']; r.placeShip(r.matrix, 'pcarrier', 5, t[a(0, 1)]), r.placeShip(r.matrix, 'pbattleship', 4, t[a(0, 1)]), r.placeShip(r.matrix, 'pdestroyer', 3, t[a(0, 1)]), r.placeShip(r.matrix, 'psubmarine', 3, t[a(0, 1)]), r.placeShip(r.matrix, 'ppatrol', 2, t[a(0, 1)]), z.renderBoard(r.matrix, z.select.initialGrid, 'initial', e), z.select.shipsDiv.style.display = 'none'; })), z.select.resetBtn.addEventListener('click', (() => { window.location.reload(); })), z.select.startBtn.addEventListener('click', (() => { const e = []; for (let n = 0; n < r.matrix.length; n++) for (let t = 0; t < r.matrix[n].length; t++)r.matrix[n][t] !== 'pcarrier' && r.matrix[n][t] !== 'pdestroyer' && r.matrix[n][t] !== 'pbattleship' && r.matrix[n][t] !== 'psubmarine' && r.matrix[n][t] !== 'ppatrol' || e.push(r.matrix[n][t]); e.includes('pcarrier') && e.includes('pbattleship') && e.includes('pdestroyer') && e.includes('psubmarine') && e.includes('ppatrol') ? (z.select.initialBg.style.display = 'none', Y.newGame(r)) : alert('Place your Ships!'); })), z.select.rotateBtn.addEventListener('click', (() => { i === 'x' ? (i = 'y', z.select.shipsDiv.classList.add('y'), z.select.shipsDiv.classList.remove('x')) : (i = 'x', z.select.shipsDiv.classList.add('x'), z.select.shipsDiv.classList.remove('y')); })), f.subscribe('getSize', f.events, ((r) => { t = +r.s, n = r.n; })), z.select.ships.forEach(((r) => { r.addEventListener('dragstart', ((r) => { const e = r.target.getAttribute('id'); const n = r.target.getAttribute('data-size'); f.publish('getSize', { n: e, s: n }); })); })), e.forEach(((a) => { a.addEventListener('dragenter', ((e) => { const n = r.matrix; const o = +e.target.getAttribute('data-line'); const s = +e.target.getAttribute('data-col'); if (n[o][s] !== 0 && a.style.background !== 'white' && (e.target.returnValue = !0, a.addEventListener('dragover', ((r) => { r.target.returnValue = !0; }))), i === 'x' && t + s <= n[o].length && n[o][s] === 0) { const r = []; for (let e = s; e <= t + s - 1; e++)n[o][e] === 0 && r.push(0); r.length === t && r.every(((r) => r === 0)) && (e.preventDefault(), a.addEventListener('dragover', ((r) => { r.preventDefault(); }))); } else if (i === 'y' && t + o <= n.length) { const r = []; for (let e = o; e <= t + o - 1; e++)n[e][s] === 0 && r.push(0); r.length === t && r.every(((r) => r === 0)) && (e.preventDefault(), a.addEventListener('dragover', ((r) => { r.preventDefault(); }))); } })), a.addEventListener('drop', ((a) => { const o = r.matrix; const s = +a.target.getAttribute('data-line'); const A = +a.target.getAttribute('data-col'); if (i === 'x') for (let r = A; r <= t + A - 1; r++) { const t = `${s}${r}`; o[s][r] = n, e[+t].style.background = 'grey'; } else if (i === 'y') for (let r = s; r <= t + s - 1; r++)o[r][A] = n, e[+`${r}${A}`].style.background = 'grey'; z.select.ships.forEach(((r) => { r.getAttribute('id') === n && (r.style.display = 'none'); })); })); })); }());
  })();
})();
// # sourceMappingURL=data:application/json;charset=utf-8;base64,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Q3pDK0ksRUFBSy9JLEdBQUdxSixHQUFPM0IsRUFFZm1GLEdBRGdCLEdBQUc3TSxJQUFJcUosS0FDTzlGLE1BQU1nSCxXQUFhLE9BR3JEWixFQUFJQyxPQUFPZSxNQUFNckQsU0FBU2dHLElBQ3BCQSxFQUFLakQsYUFBYSxRQUFVM0MsSUFDOUI0RixFQUFLL0osTUFBTXlHLFFBQVUsaUJDMUkvQjBELEkiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9iYXR0bGVzaGlwLWdhbWUvLi9zcmMvc3R5bGUuY3NzIiwid2VicGFjazovL2JhdHRsZXNoaXAtZ2FtZS8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC1nYW1lLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC1nYW1lLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzIiwid2VicGFjazovL2JhdHRsZXNoaXAtZ2FtZS8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC1nYW1lLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzIiwid2VicGFjazovL2JhdHRsZXNoaXAtZ2FtZS8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLWdhbWUvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLWdhbWUvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLWdhbWUvd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC1nYW1lL3dlYnBhY2svcnVudGltZS9jb21wYXQgZ2V0IGRlZmF1bHQgZXhwb3J0Iiwid2VicGFjazovL2JhdHRsZXNoaXAtZ2FtZS93ZWJwYWNrL3J1bnRpbWUvZGVmaW5lIHByb3BlcnR5IGdldHRlcnMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC1nYW1lL3dlYnBhY2svcnVudGltZS9oYXNPd25Qcm9wZXJ0eSBzaG9ydGhhbmQiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC1nYW1lL3dlYnBhY2svcnVudGltZS9tYWtlIG5hbWVzcGFjZSBvYmplY3QiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC1nYW1lL3dlYnBhY2svcnVudGltZS9ub25jZSIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLWdhbWUvLi9zcmMvc3R5bGUuY3NzPzcxNjMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC1nYW1lLy4vc3JjL3B1YlN1Yi5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLWdhbWUvLi9zcmMvc2hpcC5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLWdhbWUvLi9zcmMvZ2FtZWJvYXJkLmpzIiwid2VicGFjazovL2JhdHRsZXNoaXAtZ2FtZS8uL3NyYy9kb20uanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC1nYW1lLy4vc3JjL2dhbWUuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC1nYW1lLy4vc3JjL3BsYXllci5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLWdhbWUvLi9zcmMvc3RhcnRHYW1lLmpzIiwid2VicGFjazovL2JhdHRsZXNoaXAtZ2FtZS8uL3NyYy9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIioge1xcclxcbiAgbWFyZ2luOiAwO1xcclxcbiAgcGFkZGluZzogMDtcXHJcXG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxyXFxuICBmb250LWZhbWlseTogJ1BST0JFMTBQWFJlZ3VsYXInO1xcclxcbn1cXHJcXG5cXHJcXG5ib2R5IHtcXHJcXG4gIGRpc3BsYXk6IGZsZXg7XFxyXFxuICBnYXA6IDYwcHg7XFxyXFxuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcclxcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXHJcXG4gIGJhY2tncm91bmQ6ICMwZjBjMjk7ICAvKiBmYWxsYmFjayBmb3Igb2xkIGJyb3dzZXJzICovXFxyXFxuICBiYWNrZ3JvdW5kOiAtd2Via2l0LWxpbmVhci1ncmFkaWVudCh0byByaWdodCwgIzI0MjQzZSwgIzMwMmI2MywgIzBmMGMyOSk7ICAvKiBDaHJvbWUgMTAtMjUsIFNhZmFyaSA1LjEtNiAqL1xcclxcbiAgYmFja2dyb3VuZDogbGluZWFyLWdyYWRpZW50KHRvIHJpZ2h0LCAjMjQyNDNlLCAjMzAyYjYzLCAjMGYwYzI5KTsgLyogVzNDLCBJRSAxMCsvIEVkZ2UsIEZpcmVmb3ggMTYrLCBDaHJvbWUgMjYrLCBPcGVyYSAxMissIFNhZmFyaSA3KyAqL1xcclxcbn1cXHJcXG5cXHJcXG5oMSB7XFxyXFxuICB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO1xcclxcbiAgdGV4dC1zaGFkb3c6IDNweCAzcHggM3B4IGJsYWNrO1xcclxcbiAgZm9udC1zaXplOiA2LjI1cmVtO1xcclxcbiAgY29sb3I6IHdoaXRlO1xcclxcbiAgdXNlci1zZWxlY3Q6IG5vbmU7XFxyXFxufVxcclxcblxcclxcbi5nYW1lLWNvbnRhaW5lciB7XFxyXFxuICBkaXNwbGF5OiBmbGV4O1xcclxcbiAgZ2FwOiAxMDBweDtcXHJcXG4gIG1hcmdpbi1ib3R0b206IDUwcHg7XFxyXFxufVxcclxcblxcclxcbi5nYW1lLWNvbnRhaW5lciA+IGRpdiB7XFxyXFxuICBkaXNwbGF5OiBncmlkO1xcclxcbiAganVzdGlmeS1pdGVtczogY2VudGVyO1xcclxcbiAgZ2FwOiAxMHB4O1xcclxcbn1cXHJcXG5cXHJcXG5cXHJcXG4uZ2FtZS1jb250YWluZXIgPiBkaXYgcCB7XFxyXFxuICBmb250LXNpemU6IDEuNXJlbTtcXHJcXG4gIGNvbG9yOiB3aGl0ZTtcXHJcXG4gIHRleHQtdHJhbnNmb3JtOiBjYXBpdGFsaXplO1xcclxcbiAgdXNlci1zZWxlY3Q6IG5vbmU7XFxyXFxufVxcclxcblxcclxcbi5zcXVhcmUge1xcclxcbiAgd2lkdGg6IDUwcHg7XFxyXFxuICBoZWlnaHQ6IDUwcHg7XFxyXFxuICBib3JkZXI6IDFweCBzb2xpZCByZ2JhKDAsIDEwMCwgMjU1LCAxKTtcXHJcXG4gIGRpc3BsYXk6IGZsZXg7XFxyXFxuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXHJcXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxyXFxuICBiYWNrZ3JvdW5kLWNvbG9yOiBsaWdodGJsdWU7XFxyXFxufVxcclxcblxcclxcbi5ncmlkLTEsIC5ncmlkLTIge1xcclxcbiAgZGlzcGxheTogZ3JpZDtcXHJcXG4gIGdyaWQtdGVtcGxhdGUtY29sdW1uczogcmVwZWF0KDEwLCAxZnIpO1xcclxcbn1cXHJcXG5cXHJcXG4ucmVzZXQtZ2FtZSB7XFxyXFxuICB3aWR0aDogMTAwdnc7XFxyXFxuICBoZWlnaHQ6IDEwMCU7XFxyXFxuICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDI1NSwgMjU1LCAyNTUsIC41KTtcXHJcXG4gIHBvc2l0aW9uOiBmaXhlZDtcXHJcXG4gIHRvcDogMDtcXHJcXG4gIGxlZnQ6IDA7XFxyXFxuICBkaXNwbGF5OiBmbGV4O1xcclxcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXHJcXG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcclxcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXHJcXG4gIGdhcDogMjBweDtcXHJcXG4gIGRpc3BsYXk6IG5vbmU7XFxyXFxufVxcclxcblxcclxcbi5nYW1lLXJlc3VsdCB7XFxyXFxuICBmb250LXNpemU6IDNyZW07XFxyXFxufVxcclxcblxcclxcbi5yZXN0YXJ0LWJ0biB7XFxyXFxuICBwYWRkaW5nOiA4cHggMjRweDtcXHJcXG4gIGZvbnQtc2l6ZTogMS4xMjVyZW07XFxyXFxuICBib3JkZXI6IG5vbmU7XFxyXFxuICBjdXJzb3I6IHBvaW50ZXI7XFxyXFxuICBjb2xvcjogd2hpdGU7XFxyXFxuICBiYWNrZ3JvdW5kLWNvbG9yOiBibGFjaztcXHJcXG4gIGJvcmRlci1yYWRpdXM6IDEycHg7XFxyXFxufVxcclxcblxcclxcbi8qIGluaXRpYWwgc2NyZWVuICovXFxyXFxuLmluaXRpYWwtc2NyZWVuLWJnIHtcXHJcXG4gIHdpZHRoOiAxMDAlO1xcclxcbiAgaGVpZ2h0OiAxMDB2aDtcXHJcXG4gIHBvc2l0aW9uOiBmaXhlZDtcXHJcXG4gIGRpc3BsYXk6IGZsZXg7XFxyXFxuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXHJcXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxyXFxuICBiYWNrZ3JvdW5kOiAjMGYwYzI5OyAgLyogZmFsbGJhY2sgZm9yIG9sZCBicm93c2VycyAqL1xcclxcbiAgYmFja2dyb3VuZDogLXdlYmtpdC1saW5lYXItZ3JhZGllbnQodG8gcmlnaHQsICMyNDI0M2UsICMzMDJiNjMsICMwZjBjMjkpOyAgLyogQ2hyb21lIDEwLTI1LCBTYWZhcmkgNS4xLTYgKi9cXHJcXG4gIGJhY2tncm91bmQ6IGxpbmVhci1ncmFkaWVudCh0byByaWdodCwgIzI0MjQzZSwgIzMwMmI2MywgIzBmMGMyOSk7IC8qIFczQywgSUUgMTArLyBFZGdlLCBGaXJlZm94IDE2KywgQ2hyb21lIDI2KywgT3BlcmEgMTIrLCBTYWZhcmkgNysgKi9cXHJcXG4gIFxcclxcbn1cXHJcXG5cXHJcXG4uaW5pdGlhbC1zY3JlZW4ge1xcclxcbiAgd2lkdGg6IDgwMHB4O1xcclxcbiAgaGVpZ2h0OiAxMDB2aDtcXHJcXG4gIGJhY2tncm91bmQ6ICMwZjBjMjk7ICAvKiBmYWxsYmFjayBmb3Igb2xkIGJyb3dzZXJzICovXFxyXFxuICBiYWNrZ3JvdW5kOiAtd2Via2l0LWxpbmVhci1ncmFkaWVudCh0byByaWdodCwgIzI0MjQzZSwgIzMwMmI2MywgIzBmMGMyOSk7ICAvKiBDaHJvbWUgMTAtMjUsIFNhZmFyaSA1LjEtNiAqL1xcclxcbiAgYmFja2dyb3VuZDogbGluZWFyLWdyYWRpZW50KHRvIHJpZ2h0LCAjMjQyNDNlLCAjMzAyYjYzLCAjMGYwYzI5KTsgLyogVzNDLCBJRSAxMCsvIEVkZ2UsIEZpcmVmb3ggMTYrLCBDaHJvbWUgMjYrLCBPcGVyYSAxMissIFNhZmFyaSA3KyAqL1xcclxcbiAgXFxyXFxuICBwYWRkaW5nOiAyMHB4O1xcclxcbiAgcG9zaXRpb246IGFic29sdXRlO1xcclxcbiAgZGlzcGxheTogZmxleDtcXHJcXG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxyXFxuICBhbGlnbi1pdGVtczogY2VudGVyO1xcclxcbiAgZ2FwOiAxNXB4O1xcclxcbn1cXHJcXG5cXHJcXG4uaW5pdGlhbC1zY3JlZW4gaDIge1xcclxcbiAgdGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTtcXHJcXG4gIGZvbnQtc2l6ZTogMnJlbTtcXHJcXG4gIGNvbG9yOiB3aGl0ZTtcXHJcXG59XFxyXFxuXFxyXFxuLmluaXRpYWwtc2NyZWVuIHAge1xcclxcbiAgZm9udC1mYW1pbHk6ICdQUk9CRTEwUFhSZWd1bGFyJztcXHJcXG4gIGZvbnQtc2l6ZTogMS41cmVtO1xcclxcbiAgY29sb3I6IHdoaXRlO1xcclxcbn1cXHJcXG5cXHJcXG4ucG9zaXRpb25pbmctZGl2IHtcXHJcXG4gIGRpc3BsYXk6IGZsZXg7XFxyXFxuICBhbGlnbi1pdGVtczogY2VudGVyO1xcclxcbiAgZ2FwOiA1MHB4O1xcclxcbn1cXHJcXG5cXHJcXG4ueSB7XFxyXFxuICB0cmFuc2Zvcm06IHJvdGF0ZSg5MGRlZyk7XFxyXFxufVxcclxcblxcclxcbi54IHtcXHJcXG4gIHRyYW5zZm9ybTogcm90YXRlKDM2MGRlZyk7XFxyXFxufVxcclxcblxcclxcbi5pbml0aWFsLWdyaWQge1xcclxcbiAgZGlzcGxheTogZ3JpZDtcXHJcXG4gIGdyaWQtdGVtcGxhdGUtY29sdW1uczogcmVwZWF0KDEwLCAxZnIpO1xcclxcbn1cXHJcXG5cXHJcXG5cXHJcXG4uaW5pdGlhbC1ncmlkIC5zcXVhcmUge1xcclxcbiAgd2lkdGg6IDQwcHg7XFxyXFxuICBoZWlnaHQ6IDQwcHg7XFxyXFxuICBib3JkZXI6IDFweCBzb2xpZCByZ2JhKDAsIDEwMCwgMjU1LCAxKTtcXHJcXG4gIGJhY2tncm91bmQ6IGxpZ2h0Ymx1ZTtcXHJcXG4gIGRpc3BsYXk6IGZsZXg7XFxyXFxuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXHJcXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxyXFxufVxcclxcblxcclxcbi5zdGFydC1idG4sXFxyXFxuLnJhbmRvbWl6ZS1idG4sXFxyXFxuLnJlc2V0LWJ0bixcXHJcXG4ucm90YXRlLWJ0biB7XFxyXFxuICBwYWRkaW5nOiA4cHggMDtcXHJcXG4gIHdpZHRoOiAxNDRweDtcXHJcXG4gIGZvbnQtc2l6ZTogMS4xMjVyZW07XFxyXFxuICBjdXJzb3I6IHBvaW50ZXI7XFxyXFxufVxcclxcblxcclxcbi5zaGlwcyB7XFxyXFxuICBkaXNwbGF5OiBncmlkO1xcclxcbiAgZ2FwOiAxMHB4O1xcclxcbn1cXHJcXG5cXHJcXG4uc2hpcCB7XFxyXFxuICBoZWlnaHQ6IDQwcHg7XFxyXFxuICBiYWNrZ3JvdW5kLWNvbG9yOiBkYXJrZ3JleTtcXHJcXG4gIGN1cnNvcjogZ3JhYjtcXHJcXG4gIGRpc3BsYXk6IGZsZXg7XFxyXFxuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXHJcXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxyXFxuICBmb250LXNpemU6IDEuMjVyZW07XFxyXFxufVxcclxcblxcclxcbiNwY2FycmllciB7XFxyXFxuICB3aWR0aDogY2FsYyg0MHB4ICogNSk7XFxyXFxufVxcclxcblxcclxcbiNwYmF0dGxlc2hpcCB7XFxyXFxuICB3aWR0aDogY2FsYyg0MHB4ICogNCk7XFxyXFxufVxcclxcblxcclxcbiNwZGVzdHJveWVyIHtcXHJcXG4gIHdpZHRoOiBjYWxjKDQwcHggKiAzKTtcXHJcXG59XFxyXFxuXFxyXFxuI3BzdWJtYXJpbmUge1xcclxcbiAgd2lkdGg6IGNhbGMoNDBweCAqIDMpO1xcclxcbn1cXHJcXG5cXHJcXG4jcHBhdHJvbCB7XFxyXFxuICB3aWR0aDogY2FsYyg0MHB4ICogMik7XFxyXFxufVxcclxcblxcclxcbi5mb290ZXIge1xcclxcbiAgcGFkZGluZy1ib3R0b206IDIwcHg7XFxyXFxufVxcclxcblxcclxcbi5mb290ZXIgcCB7XFxyXFxuICBmb250LXNpemU6IDEuMjVyZW07XFxyXFxuICBjb2xvcjogd2hpdGU7XFxyXFxufVxcclxcblwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9zdHlsZS5jc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQUE7RUFDRSxTQUFTO0VBQ1QsVUFBVTtFQUNWLHNCQUFzQjtFQUN0QiwrQkFBK0I7QUFDakM7O0FBRUE7RUFDRSxhQUFhO0VBQ2IsU0FBUztFQUNULHNCQUFzQjtFQUN0QixtQkFBbUI7RUFDbkIsbUJBQW1CLEdBQUcsOEJBQThCO0VBQ3BELHdFQUF3RSxHQUFHLCtCQUErQjtFQUMxRyxnRUFBZ0UsRUFBRSxxRUFBcUU7QUFDekk7O0FBRUE7RUFDRSx5QkFBeUI7RUFDekIsOEJBQThCO0VBQzlCLGtCQUFrQjtFQUNsQixZQUFZO0VBQ1osaUJBQWlCO0FBQ25COztBQUVBO0VBQ0UsYUFBYTtFQUNiLFVBQVU7RUFDVixtQkFBbUI7QUFDckI7O0FBRUE7RUFDRSxhQUFhO0VBQ2IscUJBQXFCO0VBQ3JCLFNBQVM7QUFDWDs7O0FBR0E7RUFDRSxpQkFBaUI7RUFDakIsWUFBWTtFQUNaLDBCQUEwQjtFQUMxQixpQkFBaUI7QUFDbkI7O0FBRUE7RUFDRSxXQUFXO0VBQ1gsWUFBWTtFQUNaLHNDQUFzQztFQUN0QyxhQUFhO0VBQ2IsdUJBQXVCO0VBQ3ZCLG1CQUFtQjtFQUNuQiwyQkFBMkI7QUFDN0I7O0FBRUE7RUFDRSxhQUFhO0VBQ2Isc0NBQXNDO0FBQ3hDOztBQUVBO0VBQ0UsWUFBWTtFQUNaLFlBQVk7RUFDWix5Q0FBeUM7RUFDekMsZUFBZTtFQUNmLE1BQU07RUFDTixPQUFPO0VBQ1AsYUFBYTtFQUNiLHNCQUFzQjtFQUN0Qix1QkFBdUI7RUFDdkIsbUJBQW1CO0VBQ25CLFNBQVM7RUFDVCxhQUFhO0FBQ2Y7O0FBRUE7RUFDRSxlQUFlO0FBQ2pCOztBQUVBO0VBQ0UsaUJBQWlCO0VBQ2pCLG1CQUFtQjtFQUNuQixZQUFZO0VBQ1osZUFBZTtFQUNmLFlBQVk7RUFDWix1QkFBdUI7RUFDdkIsbUJBQW1CO0FBQ3JCOztBQUVBLG1CQUFtQjtBQUNuQjtFQUNFLFdBQVc7RUFDWCxhQUFhO0VBQ2IsZUFBZTtFQUNmLGFBQWE7RUFDYix1QkFBdUI7RUFDdkIsbUJBQW1CO0VBQ25CLG1CQUFtQixHQUFHLDhCQUE4QjtFQUNwRCx3RUFBd0UsR0FBRywrQkFBK0I7RUFDMUcsZ0VBQWdFLEVBQUUscUVBQXFFOztBQUV6STs7QUFFQTtFQUNFLFlBQVk7RUFDWixhQUFhO0VBQ2IsbUJBQW1CLEdBQUcsOEJBQThCO0VBQ3BELHdFQUF3RSxHQUFHLCtCQUErQjtFQUMxRyxnRUFBZ0UsRUFBRSxxRUFBcUU7O0VBRXZJLGFBQWE7RUFDYixrQkFBa0I7RUFDbEIsYUFBYTtFQUNiLHNCQUFzQjtFQUN0QixtQkFBbUI7RUFDbkIsU0FBUztBQUNYOztBQUVBO0VBQ0UseUJBQXlCO0VBQ3pCLGVBQWU7RUFDZixZQUFZO0FBQ2Q7O0FBRUE7RUFDRSwrQkFBK0I7RUFDL0IsaUJBQWlCO0VBQ2pCLFlBQVk7QUFDZDs7QUFFQTtFQUNFLGFBQWE7RUFDYixtQkFBbUI7RUFDbkIsU0FBUztBQUNYOztBQUVBO0VBQ0Usd0JBQXdCO0FBQzFCOztBQUVBO0VBQ0UseUJBQXlCO0FBQzNCOztBQUVBO0VBQ0UsYUFBYTtFQUNiLHNDQUFzQztBQUN4Qzs7O0FBR0E7RUFDRSxXQUFXO0VBQ1gsWUFBWTtFQUNaLHNDQUFzQztFQUN0QyxxQkFBcUI7RUFDckIsYUFBYTtFQUNiLHVCQUF1QjtFQUN2QixtQkFBbUI7QUFDckI7O0FBRUE7Ozs7RUFJRSxjQUFjO0VBQ2QsWUFBWTtFQUNaLG1CQUFtQjtFQUNuQixlQUFlO0FBQ2pCOztBQUVBO0VBQ0UsYUFBYTtFQUNiLFNBQVM7QUFDWDs7QUFFQTtFQUNFLFlBQVk7RUFDWiwwQkFBMEI7RUFDMUIsWUFBWTtFQUNaLGFBQWE7RUFDYix1QkFBdUI7RUFDdkIsbUJBQW1CO0VBQ25CLGtCQUFrQjtBQUNwQjs7QUFFQTtFQUNFLHFCQUFxQjtBQUN2Qjs7QUFFQTtFQUNFLHFCQUFxQjtBQUN2Qjs7QUFFQTtFQUNFLHFCQUFxQjtBQUN2Qjs7QUFFQTtFQUNFLHFCQUFxQjtBQUN2Qjs7QUFFQTtFQUNFLHFCQUFxQjtBQUN2Qjs7QUFFQTtFQUNFLG9CQUFvQjtBQUN0Qjs7QUFFQTtFQUNFLGtCQUFrQjtFQUNsQixZQUFZO0FBQ2RcIixcInNvdXJjZXNDb250ZW50XCI6W1wiKiB7XFxyXFxuICBtYXJnaW46IDA7XFxyXFxuICBwYWRkaW5nOiAwO1xcclxcbiAgYm94LXNpemluZzogYm9yZGVyLWJveDtcXHJcXG4gIGZvbnQtZmFtaWx5OiAnUFJPQkUxMFBYUmVndWxhcic7XFxyXFxufVxcclxcblxcclxcbmJvZHkge1xcclxcbiAgZGlzcGxheTogZmxleDtcXHJcXG4gIGdhcDogNjBweDtcXHJcXG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxyXFxuICBhbGlnbi1pdGVtczogY2VudGVyO1xcclxcbiAgYmFja2dyb3VuZDogIzBmMGMyOTsgIC8qIGZhbGxiYWNrIGZvciBvbGQgYnJvd3NlcnMgKi9cXHJcXG4gIGJhY2tncm91bmQ6IC13ZWJraXQtbGluZWFyLWdyYWRpZW50KHRvIHJpZ2h0LCAjMjQyNDNlLCAjMzAyYjYzLCAjMGYwYzI5KTsgIC8qIENocm9tZSAxMC0yNSwgU2FmYXJpIDUuMS02ICovXFxyXFxuICBiYWNrZ3JvdW5kOiBsaW5lYXItZ3JhZGllbnQodG8gcmlnaHQsICMyNDI0M2UsICMzMDJiNjMsICMwZjBjMjkpOyAvKiBXM0MsIElFIDEwKy8gRWRnZSwgRmlyZWZveCAxNissIENocm9tZSAyNissIE9wZXJhIDEyKywgU2FmYXJpIDcrICovXFxyXFxufVxcclxcblxcclxcbmgxIHtcXHJcXG4gIHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2U7XFxyXFxuICB0ZXh0LXNoYWRvdzogM3B4IDNweCAzcHggYmxhY2s7XFxyXFxuICBmb250LXNpemU6IDYuMjVyZW07XFxyXFxuICBjb2xvcjogd2hpdGU7XFxyXFxuICB1c2VyLXNlbGVjdDogbm9uZTtcXHJcXG59XFxyXFxuXFxyXFxuLmdhbWUtY29udGFpbmVyIHtcXHJcXG4gIGRpc3BsYXk6IGZsZXg7XFxyXFxuICBnYXA6IDEwMHB4O1xcclxcbiAgbWFyZ2luLWJvdHRvbTogNTBweDtcXHJcXG59XFxyXFxuXFxyXFxuLmdhbWUtY29udGFpbmVyID4gZGl2IHtcXHJcXG4gIGRpc3BsYXk6IGdyaWQ7XFxyXFxuICBqdXN0aWZ5LWl0ZW1zOiBjZW50ZXI7XFxyXFxuICBnYXA6IDEwcHg7XFxyXFxufVxcclxcblxcclxcblxcclxcbi5nYW1lLWNvbnRhaW5lciA+IGRpdiBwIHtcXHJcXG4gIGZvbnQtc2l6ZTogMS41cmVtO1xcclxcbiAgY29sb3I6IHdoaXRlO1xcclxcbiAgdGV4dC10cmFuc2Zvcm06IGNhcGl0YWxpemU7XFxyXFxuICB1c2VyLXNlbGVjdDogbm9uZTtcXHJcXG59XFxyXFxuXFxyXFxuLnNxdWFyZSB7XFxyXFxuICB3aWR0aDogNTBweDtcXHJcXG4gIGhlaWdodDogNTBweDtcXHJcXG4gIGJvcmRlcjogMXB4IHNvbGlkIHJnYmEoMCwgMTAwLCAyNTUsIDEpO1xcclxcbiAgZGlzcGxheTogZmxleDtcXHJcXG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcclxcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXHJcXG4gIGJhY2tncm91bmQtY29sb3I6IGxpZ2h0Ymx1ZTtcXHJcXG59XFxyXFxuXFxyXFxuLmdyaWQtMSwgLmdyaWQtMiB7XFxyXFxuICBkaXNwbGF5OiBncmlkO1xcclxcbiAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiByZXBlYXQoMTAsIDFmcik7XFxyXFxufVxcclxcblxcclxcbi5yZXNldC1nYW1lIHtcXHJcXG4gIHdpZHRoOiAxMDB2dztcXHJcXG4gIGhlaWdodDogMTAwJTtcXHJcXG4gIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMjU1LCAyNTUsIDI1NSwgLjUpO1xcclxcbiAgcG9zaXRpb246IGZpeGVkO1xcclxcbiAgdG9wOiAwO1xcclxcbiAgbGVmdDogMDtcXHJcXG4gIGRpc3BsYXk6IGZsZXg7XFxyXFxuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcclxcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxyXFxuICBhbGlnbi1pdGVtczogY2VudGVyO1xcclxcbiAgZ2FwOiAyMHB4O1xcclxcbiAgZGlzcGxheTogbm9uZTtcXHJcXG59XFxyXFxuXFxyXFxuLmdhbWUtcmVzdWx0IHtcXHJcXG4gIGZvbnQtc2l6ZTogM3JlbTtcXHJcXG59XFxyXFxuXFxyXFxuLnJlc3RhcnQtYnRuIHtcXHJcXG4gIHBhZGRpbmc6IDhweCAyNHB4O1xcclxcbiAgZm9udC1zaXplOiAxLjEyNXJlbTtcXHJcXG4gIGJvcmRlcjogbm9uZTtcXHJcXG4gIGN1cnNvcjogcG9pbnRlcjtcXHJcXG4gIGNvbG9yOiB3aGl0ZTtcXHJcXG4gIGJhY2tncm91bmQtY29sb3I6IGJsYWNrO1xcclxcbiAgYm9yZGVyLXJhZGl1czogMTJweDtcXHJcXG59XFxyXFxuXFxyXFxuLyogaW5pdGlhbCBzY3JlZW4gKi9cXHJcXG4uaW5pdGlhbC1zY3JlZW4tYmcge1xcclxcbiAgd2lkdGg6IDEwMCU7XFxyXFxuICBoZWlnaHQ6IDEwMHZoO1xcclxcbiAgcG9zaXRpb246IGZpeGVkO1xcclxcbiAgZGlzcGxheTogZmxleDtcXHJcXG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcclxcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXHJcXG4gIGJhY2tncm91bmQ6ICMwZjBjMjk7ICAvKiBmYWxsYmFjayBmb3Igb2xkIGJyb3dzZXJzICovXFxyXFxuICBiYWNrZ3JvdW5kOiAtd2Via2l0LWxpbmVhci1ncmFkaWVudCh0byByaWdodCwgIzI0MjQzZSwgIzMwMmI2MywgIzBmMGMyOSk7ICAvKiBDaHJvbWUgMTAtMjUsIFNhZmFyaSA1LjEtNiAqL1xcclxcbiAgYmFja2dyb3VuZDogbGluZWFyLWdyYWRpZW50KHRvIHJpZ2h0LCAjMjQyNDNlLCAjMzAyYjYzLCAjMGYwYzI5KTsgLyogVzNDLCBJRSAxMCsvIEVkZ2UsIEZpcmVmb3ggMTYrLCBDaHJvbWUgMjYrLCBPcGVyYSAxMissIFNhZmFyaSA3KyAqL1xcclxcbiAgXFxyXFxufVxcclxcblxcclxcbi5pbml0aWFsLXNjcmVlbiB7XFxyXFxuICB3aWR0aDogODAwcHg7XFxyXFxuICBoZWlnaHQ6IDEwMHZoO1xcclxcbiAgYmFja2dyb3VuZDogIzBmMGMyOTsgIC8qIGZhbGxiYWNrIGZvciBvbGQgYnJvd3NlcnMgKi9cXHJcXG4gIGJhY2tncm91bmQ6IC13ZWJraXQtbGluZWFyLWdyYWRpZW50KHRvIHJpZ2h0LCAjMjQyNDNlLCAjMzAyYjYzLCAjMGYwYzI5KTsgIC8qIENocm9tZSAxMC0yNSwgU2FmYXJpIDUuMS02ICovXFxyXFxuICBiYWNrZ3JvdW5kOiBsaW5lYXItZ3JhZGllbnQodG8gcmlnaHQsICMyNDI0M2UsICMzMDJiNjMsICMwZjBjMjkpOyAvKiBXM0MsIElFIDEwKy8gRWRnZSwgRmlyZWZveCAxNissIENocm9tZSAyNissIE9wZXJhIDEyKywgU2FmYXJpIDcrICovXFxyXFxuICBcXHJcXG4gIHBhZGRpbmc6IDIwcHg7XFxyXFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxyXFxuICBkaXNwbGF5OiBmbGV4O1xcclxcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXHJcXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxyXFxuICBnYXA6IDE1cHg7XFxyXFxufVxcclxcblxcclxcbi5pbml0aWFsLXNjcmVlbiBoMiB7XFxyXFxuICB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO1xcclxcbiAgZm9udC1zaXplOiAycmVtO1xcclxcbiAgY29sb3I6IHdoaXRlO1xcclxcbn1cXHJcXG5cXHJcXG4uaW5pdGlhbC1zY3JlZW4gcCB7XFxyXFxuICBmb250LWZhbWlseTogJ1BST0JFMTBQWFJlZ3VsYXInO1xcclxcbiAgZm9udC1zaXplOiAxLjVyZW07XFxyXFxuICBjb2xvcjogd2hpdGU7XFxyXFxufVxcclxcblxcclxcbi5wb3NpdGlvbmluZy1kaXYge1xcclxcbiAgZGlzcGxheTogZmxleDtcXHJcXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxyXFxuICBnYXA6IDUwcHg7XFxyXFxufVxcclxcblxcclxcbi55IHtcXHJcXG4gIHRyYW5zZm9ybTogcm90YXRlKDkwZGVnKTtcXHJcXG59XFxyXFxuXFxyXFxuLngge1xcclxcbiAgdHJhbnNmb3JtOiByb3RhdGUoMzYwZGVnKTtcXHJcXG59XFxyXFxuXFxyXFxuLmluaXRpYWwtZ3JpZCB7XFxyXFxuICBkaXNwbGF5OiBncmlkO1xcclxcbiAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiByZXBlYXQoMTAsIDFmcik7XFxyXFxufVxcclxcblxcclxcblxcclxcbi5pbml0aWFsLWdyaWQgLnNxdWFyZSB7XFxyXFxuICB3aWR0aDogNDBweDtcXHJcXG4gIGhlaWdodDogNDBweDtcXHJcXG4gIGJvcmRlcjogMXB4IHNvbGlkIHJnYmEoMCwgMTAwLCAyNTUsIDEpO1xcclxcbiAgYmFja2dyb3VuZDogbGlnaHRibHVlO1xcclxcbiAgZGlzcGxheTogZmxleDtcXHJcXG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcclxcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXHJcXG59XFxyXFxuXFxyXFxuLnN0YXJ0LWJ0bixcXHJcXG4ucmFuZG9taXplLWJ0bixcXHJcXG4ucmVzZXQtYnRuLFxcclxcbi5yb3RhdGUtYnRuIHtcXHJcXG4gIHBhZGRpbmc6IDhweCAwO1xcclxcbiAgd2lkdGg6IDE0NHB4O1xcclxcbiAgZm9udC1zaXplOiAxLjEyNXJlbTtcXHJcXG4gIGN1cnNvcjogcG9pbnRlcjtcXHJcXG59XFxyXFxuXFxyXFxuLnNoaXBzIHtcXHJcXG4gIGRpc3BsYXk6IGdyaWQ7XFxyXFxuICBnYXA6IDEwcHg7XFxyXFxufVxcclxcblxcclxcbi5zaGlwIHtcXHJcXG4gIGhlaWdodDogNDBweDtcXHJcXG4gIGJhY2tncm91bmQtY29sb3I6IGRhcmtncmV5O1xcclxcbiAgY3Vyc29yOiBncmFiO1xcclxcbiAgZGlzcGxheTogZmxleDtcXHJcXG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcclxcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXHJcXG4gIGZvbnQtc2l6ZTogMS4yNXJlbTtcXHJcXG59XFxyXFxuXFxyXFxuI3BjYXJyaWVyIHtcXHJcXG4gIHdpZHRoOiBjYWxjKDQwcHggKiA1KTtcXHJcXG59XFxyXFxuXFxyXFxuI3BiYXR0bGVzaGlwIHtcXHJcXG4gIHdpZHRoOiBjYWxjKDQwcHggKiA0KTtcXHJcXG59XFxyXFxuXFxyXFxuI3BkZXN0cm95ZXIge1xcclxcbiAgd2lkdGg6IGNhbGMoNDBweCAqIDMpO1xcclxcbn1cXHJcXG5cXHJcXG4jcHN1Ym1hcmluZSB7XFxyXFxuICB3aWR0aDogY2FsYyg0MHB4ICogMyk7XFxyXFxufVxcclxcblxcclxcbiNwcGF0cm9sIHtcXHJcXG4gIHdpZHRoOiBjYWxjKDQwcHggKiAyKTtcXHJcXG59XFxyXFxuXFxyXFxuLmZvb3RlciB7XFxyXFxuICBwYWRkaW5nLWJvdHRvbTogMjBweDtcXHJcXG59XFxyXFxuXFxyXFxuLmZvb3RlciBwIHtcXHJcXG4gIGZvbnQtc2l6ZTogMS4yNXJlbTtcXHJcXG4gIGNvbG9yOiB3aGl0ZTtcXHJcXG59XFxyXFxuXCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIlwidXNlIHN0cmljdFwiO1xuXG4vKlxuICBNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxuICBBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXG4qL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoY3NzV2l0aE1hcHBpbmdUb1N0cmluZykge1xuICB2YXIgbGlzdCA9IFtdOyAvLyByZXR1cm4gdGhlIGxpc3Qgb2YgbW9kdWxlcyBhcyBjc3Mgc3RyaW5nXG5cbiAgbGlzdC50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiB0aGlzLm1hcChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgdmFyIGNvbnRlbnQgPSBcIlwiO1xuICAgICAgdmFyIG5lZWRMYXllciA9IHR5cGVvZiBpdGVtWzVdICE9PSBcInVuZGVmaW5lZFwiO1xuXG4gICAgICBpZiAoaXRlbVs0XSkge1xuICAgICAgICBjb250ZW50ICs9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQoaXRlbVs0XSwgXCIpIHtcIik7XG4gICAgICB9XG5cbiAgICAgIGlmIChpdGVtWzJdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJAbWVkaWEgXCIuY29uY2F0KGl0ZW1bMl0sIFwiIHtcIik7XG4gICAgICB9XG5cbiAgICAgIGlmIChuZWVkTGF5ZXIpIHtcbiAgICAgICAgY29udGVudCArPSBcIkBsYXllclwiLmNvbmNhdChpdGVtWzVdLmxlbmd0aCA+IDAgPyBcIiBcIi5jb25jYXQoaXRlbVs1XSkgOiBcIlwiLCBcIiB7XCIpO1xuICAgICAgfVxuXG4gICAgICBjb250ZW50ICs9IGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSk7XG5cbiAgICAgIGlmIChuZWVkTGF5ZXIpIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cblxuICAgICAgaWYgKGl0ZW1bMl0pIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cblxuICAgICAgaWYgKGl0ZW1bNF0pIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGNvbnRlbnQ7XG4gICAgfSkuam9pbihcIlwiKTtcbiAgfTsgLy8gaW1wb3J0IGEgbGlzdCBvZiBtb2R1bGVzIGludG8gdGhlIGxpc3RcblxuXG4gIGxpc3QuaSA9IGZ1bmN0aW9uIGkobW9kdWxlcywgbWVkaWEsIGRlZHVwZSwgc3VwcG9ydHMsIGxheWVyKSB7XG4gICAgaWYgKHR5cGVvZiBtb2R1bGVzID09PSBcInN0cmluZ1wiKSB7XG4gICAgICBtb2R1bGVzID0gW1tudWxsLCBtb2R1bGVzLCB1bmRlZmluZWRdXTtcbiAgICB9XG5cbiAgICB2YXIgYWxyZWFkeUltcG9ydGVkTW9kdWxlcyA9IHt9O1xuXG4gICAgaWYgKGRlZHVwZSkge1xuICAgICAgZm9yICh2YXIgayA9IDA7IGsgPCB0aGlzLmxlbmd0aDsgaysrKSB7XG4gICAgICAgIHZhciBpZCA9IHRoaXNba11bMF07XG5cbiAgICAgICAgaWYgKGlkICE9IG51bGwpIHtcbiAgICAgICAgICBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2lkXSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBmb3IgKHZhciBfayA9IDA7IF9rIDwgbW9kdWxlcy5sZW5ndGg7IF9rKyspIHtcbiAgICAgIHZhciBpdGVtID0gW10uY29uY2F0KG1vZHVsZXNbX2tdKTtcblxuICAgICAgaWYgKGRlZHVwZSAmJiBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2l0ZW1bMF1dKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIGxheWVyICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgIGlmICh0eXBlb2YgaXRlbVs1XSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgIGl0ZW1bNV0gPSBsYXllcjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzFdID0gXCJAbGF5ZXJcIi5jb25jYXQoaXRlbVs1XS5sZW5ndGggPiAwID8gXCIgXCIuY29uY2F0KGl0ZW1bNV0pIDogXCJcIiwgXCIge1wiKS5jb25jYXQoaXRlbVsxXSwgXCJ9XCIpO1xuICAgICAgICAgIGl0ZW1bNV0gPSBsYXllcjtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAobWVkaWEpIHtcbiAgICAgICAgaWYgKCFpdGVtWzJdKSB7XG4gICAgICAgICAgaXRlbVsyXSA9IG1lZGlhO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBtZWRpYSBcIi5jb25jYXQoaXRlbVsyXSwgXCIge1wiKS5jb25jYXQoaXRlbVsxXSwgXCJ9XCIpO1xuICAgICAgICAgIGl0ZW1bMl0gPSBtZWRpYTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoc3VwcG9ydHMpIHtcbiAgICAgICAgaWYgKCFpdGVtWzRdKSB7XG4gICAgICAgICAgaXRlbVs0XSA9IFwiXCIuY29uY2F0KHN1cHBvcnRzKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzFdID0gXCJAc3VwcG9ydHMgKFwiLmNvbmNhdChpdGVtWzRdLCBcIikge1wiKS5jb25jYXQoaXRlbVsxXSwgXCJ9XCIpO1xuICAgICAgICAgIGl0ZW1bNF0gPSBzdXBwb3J0cztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBsaXN0LnB1c2goaXRlbSk7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiBsaXN0O1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXRlbSkge1xuICB2YXIgY29udGVudCA9IGl0ZW1bMV07XG4gIHZhciBjc3NNYXBwaW5nID0gaXRlbVszXTtcblxuICBpZiAoIWNzc01hcHBpbmcpIHtcbiAgICByZXR1cm4gY29udGVudDtcbiAgfVxuXG4gIGlmICh0eXBlb2YgYnRvYSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgdmFyIGJhc2U2NCA9IGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KGNzc01hcHBpbmcpKSkpO1xuICAgIHZhciBkYXRhID0gXCJzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxcIi5jb25jYXQoYmFzZTY0KTtcbiAgICB2YXIgc291cmNlTWFwcGluZyA9IFwiLyojIFwiLmNvbmNhdChkYXRhLCBcIiAqL1wiKTtcbiAgICB2YXIgc291cmNlVVJMcyA9IGNzc01hcHBpbmcuc291cmNlcy5tYXAoZnVuY3Rpb24gKHNvdXJjZSkge1xuICAgICAgcmV0dXJuIFwiLyojIHNvdXJjZVVSTD1cIi5jb25jYXQoY3NzTWFwcGluZy5zb3VyY2VSb290IHx8IFwiXCIpLmNvbmNhdChzb3VyY2UsIFwiICovXCIpO1xuICAgIH0pO1xuICAgIHJldHVybiBbY29udGVudF0uY29uY2F0KHNvdXJjZVVSTHMpLmNvbmNhdChbc291cmNlTWFwcGluZ10pLmpvaW4oXCJcXG5cIik7XG4gIH1cblxuICByZXR1cm4gW2NvbnRlbnRdLmpvaW4oXCJcXG5cIik7XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgc3R5bGVzSW5ET00gPSBbXTtcblxuZnVuY3Rpb24gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcikge1xuICB2YXIgcmVzdWx0ID0gLTE7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHlsZXNJbkRPTS5sZW5ndGg7IGkrKykge1xuICAgIGlmIChzdHlsZXNJbkRPTVtpXS5pZGVudGlmaWVyID09PSBpZGVudGlmaWVyKSB7XG4gICAgICByZXN1bHQgPSBpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZnVuY3Rpb24gbW9kdWxlc1RvRG9tKGxpc3QsIG9wdGlvbnMpIHtcbiAgdmFyIGlkQ291bnRNYXAgPSB7fTtcbiAgdmFyIGlkZW50aWZpZXJzID0gW107XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGl0ZW0gPSBsaXN0W2ldO1xuICAgIHZhciBpZCA9IG9wdGlvbnMuYmFzZSA/IGl0ZW1bMF0gKyBvcHRpb25zLmJhc2UgOiBpdGVtWzBdO1xuICAgIHZhciBjb3VudCA9IGlkQ291bnRNYXBbaWRdIHx8IDA7XG4gICAgdmFyIGlkZW50aWZpZXIgPSBcIlwiLmNvbmNhdChpZCwgXCIgXCIpLmNvbmNhdChjb3VudCk7XG4gICAgaWRDb3VudE1hcFtpZF0gPSBjb3VudCArIDE7XG4gICAgdmFyIGluZGV4QnlJZGVudGlmaWVyID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcik7XG4gICAgdmFyIG9iaiA9IHtcbiAgICAgIGNzczogaXRlbVsxXSxcbiAgICAgIG1lZGlhOiBpdGVtWzJdLFxuICAgICAgc291cmNlTWFwOiBpdGVtWzNdLFxuICAgICAgc3VwcG9ydHM6IGl0ZW1bNF0sXG4gICAgICBsYXllcjogaXRlbVs1XVxuICAgIH07XG5cbiAgICBpZiAoaW5kZXhCeUlkZW50aWZpZXIgIT09IC0xKSB7XG4gICAgICBzdHlsZXNJbkRPTVtpbmRleEJ5SWRlbnRpZmllcl0ucmVmZXJlbmNlcysrO1xuICAgICAgc3R5bGVzSW5ET01baW5kZXhCeUlkZW50aWZpZXJdLnVwZGF0ZXIob2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHVwZGF0ZXIgPSBhZGRFbGVtZW50U3R5bGUob2JqLCBvcHRpb25zKTtcbiAgICAgIG9wdGlvbnMuYnlJbmRleCA9IGk7XG4gICAgICBzdHlsZXNJbkRPTS5zcGxpY2UoaSwgMCwge1xuICAgICAgICBpZGVudGlmaWVyOiBpZGVudGlmaWVyLFxuICAgICAgICB1cGRhdGVyOiB1cGRhdGVyLFxuICAgICAgICByZWZlcmVuY2VzOiAxXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZGVudGlmaWVycy5wdXNoKGlkZW50aWZpZXIpO1xuICB9XG5cbiAgcmV0dXJuIGlkZW50aWZpZXJzO1xufVxuXG5mdW5jdGlvbiBhZGRFbGVtZW50U3R5bGUob2JqLCBvcHRpb25zKSB7XG4gIHZhciBhcGkgPSBvcHRpb25zLmRvbUFQSShvcHRpb25zKTtcbiAgYXBpLnVwZGF0ZShvYmopO1xuXG4gIHZhciB1cGRhdGVyID0gZnVuY3Rpb24gdXBkYXRlcihuZXdPYmopIHtcbiAgICBpZiAobmV3T2JqKSB7XG4gICAgICBpZiAobmV3T2JqLmNzcyA9PT0gb2JqLmNzcyAmJiBuZXdPYmoubWVkaWEgPT09IG9iai5tZWRpYSAmJiBuZXdPYmouc291cmNlTWFwID09PSBvYmouc291cmNlTWFwICYmIG5ld09iai5zdXBwb3J0cyA9PT0gb2JqLnN1cHBvcnRzICYmIG5ld09iai5sYXllciA9PT0gb2JqLmxheWVyKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgYXBpLnVwZGF0ZShvYmogPSBuZXdPYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICBhcGkucmVtb3ZlKCk7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiB1cGRhdGVyO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChsaXN0LCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICBsaXN0ID0gbGlzdCB8fCBbXTtcbiAgdmFyIGxhc3RJZGVudGlmaWVycyA9IG1vZHVsZXNUb0RvbShsaXN0LCBvcHRpb25zKTtcbiAgcmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZShuZXdMaXN0KSB7XG4gICAgbmV3TGlzdCA9IG5ld0xpc3QgfHwgW107XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxhc3RJZGVudGlmaWVycy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGlkZW50aWZpZXIgPSBsYXN0SWRlbnRpZmllcnNbaV07XG4gICAgICB2YXIgaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKTtcbiAgICAgIHN0eWxlc0luRE9NW2luZGV4XS5yZWZlcmVuY2VzLS07XG4gICAgfVxuXG4gICAgdmFyIG5ld0xhc3RJZGVudGlmaWVycyA9IG1vZHVsZXNUb0RvbShuZXdMaXN0LCBvcHRpb25zKTtcblxuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBsYXN0SWRlbnRpZmllcnMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICB2YXIgX2lkZW50aWZpZXIgPSBsYXN0SWRlbnRpZmllcnNbX2ldO1xuXG4gICAgICB2YXIgX2luZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoX2lkZW50aWZpZXIpO1xuXG4gICAgICBpZiAoc3R5bGVzSW5ET01bX2luZGV4XS5yZWZlcmVuY2VzID09PSAwKSB7XG4gICAgICAgIHN0eWxlc0luRE9NW19pbmRleF0udXBkYXRlcigpO1xuXG4gICAgICAgIHN0eWxlc0luRE9NLnNwbGljZShfaW5kZXgsIDEpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGxhc3RJZGVudGlmaWVycyA9IG5ld0xhc3RJZGVudGlmaWVycztcbiAgfTtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBtZW1vID0ge307XG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cblxuZnVuY3Rpb24gZ2V0VGFyZ2V0KHRhcmdldCkge1xuICBpZiAodHlwZW9mIG1lbW9bdGFyZ2V0XSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgIHZhciBzdHlsZVRhcmdldCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGFyZ2V0KTsgLy8gU3BlY2lhbCBjYXNlIHRvIHJldHVybiBoZWFkIG9mIGlmcmFtZSBpbnN0ZWFkIG9mIGlmcmFtZSBpdHNlbGZcblxuICAgIGlmICh3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQgJiYgc3R5bGVUYXJnZXQgaW5zdGFuY2VvZiB3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIC8vIFRoaXMgd2lsbCB0aHJvdyBhbiBleGNlcHRpb24gaWYgYWNjZXNzIHRvIGlmcmFtZSBpcyBibG9ja2VkXG4gICAgICAgIC8vIGR1ZSB0byBjcm9zcy1vcmlnaW4gcmVzdHJpY3Rpb25zXG4gICAgICAgIHN0eWxlVGFyZ2V0ID0gc3R5bGVUYXJnZXQuY29udGVudERvY3VtZW50LmhlYWQ7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIC8vIGlzdGFuYnVsIGlnbm9yZSBuZXh0XG4gICAgICAgIHN0eWxlVGFyZ2V0ID0gbnVsbDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBtZW1vW3RhcmdldF0gPSBzdHlsZVRhcmdldDtcbiAgfVxuXG4gIHJldHVybiBtZW1vW3RhcmdldF07XG59XG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cblxuXG5mdW5jdGlvbiBpbnNlcnRCeVNlbGVjdG9yKGluc2VydCwgc3R5bGUpIHtcbiAgdmFyIHRhcmdldCA9IGdldFRhcmdldChpbnNlcnQpO1xuXG4gIGlmICghdGFyZ2V0KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiQ291bGRuJ3QgZmluZCBhIHN0eWxlIHRhcmdldC4gVGhpcyBwcm9iYWJseSBtZWFucyB0aGF0IHRoZSB2YWx1ZSBmb3IgdGhlICdpbnNlcnQnIHBhcmFtZXRlciBpcyBpbnZhbGlkLlwiKTtcbiAgfVxuXG4gIHRhcmdldC5hcHBlbmRDaGlsZChzdHlsZSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaW5zZXJ0QnlTZWxlY3RvcjsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucykge1xuICB2YXIgZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiKTtcbiAgb3B0aW9ucy5zZXRBdHRyaWJ1dGVzKGVsZW1lbnQsIG9wdGlvbnMuYXR0cmlidXRlcyk7XG4gIG9wdGlvbnMuaW5zZXJ0KGVsZW1lbnQsIG9wdGlvbnMub3B0aW9ucyk7XG4gIHJldHVybiBlbGVtZW50O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGluc2VydFN0eWxlRWxlbWVudDsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBzZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMoc3R5bGVFbGVtZW50KSB7XG4gIHZhciBub25jZSA9IHR5cGVvZiBfX3dlYnBhY2tfbm9uY2VfXyAhPT0gXCJ1bmRlZmluZWRcIiA/IF9fd2VicGFja19ub25jZV9fIDogbnVsbDtcblxuICBpZiAobm9uY2UpIHtcbiAgICBzdHlsZUVsZW1lbnQuc2V0QXR0cmlidXRlKFwibm9uY2VcIiwgbm9uY2UpO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzOyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGFwcGx5KHN0eWxlRWxlbWVudCwgb3B0aW9ucywgb2JqKSB7XG4gIHZhciBjc3MgPSBcIlwiO1xuXG4gIGlmIChvYmouc3VwcG9ydHMpIHtcbiAgICBjc3MgKz0gXCJAc3VwcG9ydHMgKFwiLmNvbmNhdChvYmouc3VwcG9ydHMsIFwiKSB7XCIpO1xuICB9XG5cbiAgaWYgKG9iai5tZWRpYSkge1xuICAgIGNzcyArPSBcIkBtZWRpYSBcIi5jb25jYXQob2JqLm1lZGlhLCBcIiB7XCIpO1xuICB9XG5cbiAgdmFyIG5lZWRMYXllciA9IHR5cGVvZiBvYmoubGF5ZXIgIT09IFwidW5kZWZpbmVkXCI7XG5cbiAgaWYgKG5lZWRMYXllcikge1xuICAgIGNzcyArPSBcIkBsYXllclwiLmNvbmNhdChvYmoubGF5ZXIubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChvYmoubGF5ZXIpIDogXCJcIiwgXCIge1wiKTtcbiAgfVxuXG4gIGNzcyArPSBvYmouY3NzO1xuXG4gIGlmIChuZWVkTGF5ZXIpIHtcbiAgICBjc3MgKz0gXCJ9XCI7XG4gIH1cblxuICBpZiAob2JqLm1lZGlhKSB7XG4gICAgY3NzICs9IFwifVwiO1xuICB9XG5cbiAgaWYgKG9iai5zdXBwb3J0cykge1xuICAgIGNzcyArPSBcIn1cIjtcbiAgfVxuXG4gIHZhciBzb3VyY2VNYXAgPSBvYmouc291cmNlTWFwO1xuXG4gIGlmIChzb3VyY2VNYXAgJiYgdHlwZW9mIGJ0b2EgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICBjc3MgKz0gXCJcXG4vKiMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LFwiLmNvbmNhdChidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShzb3VyY2VNYXApKSkpLCBcIiAqL1wiKTtcbiAgfSAvLyBGb3Igb2xkIElFXG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICAqL1xuXG5cbiAgb3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybShjc3MsIHN0eWxlRWxlbWVudCwgb3B0aW9ucy5vcHRpb25zKTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlRWxlbWVudCkge1xuICAvLyBpc3RhbmJ1bCBpZ25vcmUgaWZcbiAgaWYgKHN0eWxlRWxlbWVudC5wYXJlbnROb2RlID09PSBudWxsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgc3R5bGVFbGVtZW50LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc3R5bGVFbGVtZW50KTtcbn1cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuXG5cbmZ1bmN0aW9uIGRvbUFQSShvcHRpb25zKSB7XG4gIHZhciBzdHlsZUVsZW1lbnQgPSBvcHRpb25zLmluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKTtcbiAgcmV0dXJuIHtcbiAgICB1cGRhdGU6IGZ1bmN0aW9uIHVwZGF0ZShvYmopIHtcbiAgICAgIGFwcGx5KHN0eWxlRWxlbWVudCwgb3B0aW9ucywgb2JqKTtcbiAgICB9LFxuICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKCkge1xuICAgICAgcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlRWxlbWVudCk7XG4gICAgfVxuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGRvbUFQSTsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBzdHlsZVRhZ1RyYW5zZm9ybShjc3MsIHN0eWxlRWxlbWVudCkge1xuICBpZiAoc3R5bGVFbGVtZW50LnN0eWxlU2hlZXQpIHtcbiAgICBzdHlsZUVsZW1lbnQuc3R5bGVTaGVldC5jc3NUZXh0ID0gY3NzO1xuICB9IGVsc2Uge1xuICAgIHdoaWxlIChzdHlsZUVsZW1lbnQuZmlyc3RDaGlsZCkge1xuICAgICAgc3R5bGVFbGVtZW50LnJlbW92ZUNoaWxkKHN0eWxlRWxlbWVudC5maXJzdENoaWxkKTtcbiAgICB9XG5cbiAgICBzdHlsZUVsZW1lbnQuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKSk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzdHlsZVRhZ1RyYW5zZm9ybTsiLCIvLyBUaGUgbW9kdWxlIGNhY2hlXG52YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG5cbi8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG5mdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuXHR2YXIgY2FjaGVkTW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXTtcblx0aWYgKGNhY2hlZE1vZHVsZSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0cmV0dXJuIGNhY2hlZE1vZHVsZS5leHBvcnRzO1xuXHR9XG5cdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG5cdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuXHRcdGlkOiBtb2R1bGVJZCxcblx0XHQvLyBubyBtb2R1bGUubG9hZGVkIG5lZWRlZFxuXHRcdGV4cG9ydHM6IHt9XG5cdH07XG5cblx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG5cdF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdKG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuIiwiLy8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbl9fd2VicGFja19yZXF1aXJlX18ubiA9IChtb2R1bGUpID0+IHtcblx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG5cdFx0KCkgPT4gKG1vZHVsZVsnZGVmYXVsdCddKSA6XG5cdFx0KCkgPT4gKG1vZHVsZSk7XG5cdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsIHsgYTogZ2V0dGVyIH0pO1xuXHRyZXR1cm4gZ2V0dGVyO1xufTsiLCIvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9ucyBmb3IgaGFybW9ueSBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSAoZXhwb3J0cywgZGVmaW5pdGlvbikgPT4ge1xuXHRmb3IodmFyIGtleSBpbiBkZWZpbml0aW9uKSB7XG5cdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGRlZmluaXRpb24sIGtleSkgJiYgIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBrZXkpKSB7XG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZGVmaW5pdGlvbltrZXldIH0pO1xuXHRcdH1cblx0fVxufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSAob2JqLCBwcm9wKSA9PiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCkpIiwiLy8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5yID0gKGV4cG9ydHMpID0+IHtcblx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cdH1cblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5uYyA9IHVuZGVmaW5lZDsiLCJcbiAgICAgIGltcG9ydCBBUEkgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydEZuIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qc1wiO1xuICAgICAgaW1wb3J0IHNldEF0dHJpYnV0ZXMgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBzdHlsZVRhZ1RyYW5zZm9ybUZuIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanNcIjtcbiAgICAgIGltcG9ydCBjb250ZW50LCAqIGFzIG5hbWVkRXhwb3J0IGZyb20gXCIhIS4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vc3R5bGUuY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5cbiAgICAgIG9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG4gICAgXG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9zdHlsZS5jc3NcIjtcbiAgICAgICBleHBvcnQgZGVmYXVsdCBjb250ZW50ICYmIGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB1bmRlZmluZWQ7XG4iLCIvLyBQdWJTdWIgTW9kdWxlXG5jb25zdCBldmVudHMgPSAoZnVuY3Rpb24gKCkge1xuICBjb25zdCBldmVudHMgPSB7fTtcblxuICBjb25zdCBzdWJzY3JpYmUgPSBmdW5jdGlvbiAoZXZlbnROYW1lLCBvYmplY3QsIGNhbGxiYWNrKSB7XG4gICAgdGhpcy5ldmVudHNbZXZlbnROYW1lXSA9IHRoaXMuZXZlbnRzW2V2ZW50TmFtZV0gfHwgW107XG4gICAgdGhpcy5ldmVudHNbZXZlbnROYW1lXS5wdXNoKHsgb2JqZWN0LCBjYWxsYmFjayB9KTtcbiAgfTtcblxuICBjb25zdCB1bnN1YnNjcmliZSA9IGZ1bmN0aW9uIChldmVudE5hbWUsIG9iamVjdCwgY2FsbGJhY2spIHtcbiAgICBpZiAodGhpcy5ldmVudHNbZXZlbnROYW1lXSkge1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmV2ZW50c1tldmVudE5hbWVdLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmICh0aGlzLmV2ZW50c1tldmVudE5hbWVdW2ldLm9iamVjdCA9PT0gb2JqZWN0KSB7XG4gICAgICAgICAgdGhpcy5ldmVudHNbZXZlbnROYW1lXS5zcGxpY2UoaSwgMSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgY29uc3QgcHVibGlzaCA9IGZ1bmN0aW9uIChldmVudE5hbWUsIGRhdGEpIHtcbiAgICBpZiAodGhpcy5ldmVudHNbZXZlbnROYW1lXSkge1xuICAgICAgdGhpcy5ldmVudHNbZXZlbnROYW1lXS5mb3JFYWNoKChpbnN0YW5jZSkgPT4ge1xuICAgICAgICBpbnN0YW5jZS5jYWxsYmFjayhkYXRhKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4ge1xuICAgIGV2ZW50cywgc3Vic2NyaWJlLCB1bnN1YnNjcmliZSwgcHVibGlzaCxcbiAgfTtcbn0oKSk7XG5cbmV4cG9ydCBkZWZhdWx0IGV2ZW50cztcbiIsImltcG9ydCBldmVudHMgZnJvbSAnLi9wdWJTdWInO1xuXG5mdW5jdGlvbiBTaGlwKG4sIHNpemUpIHtcbiAgY29uc3QgbmFtZSA9IG47XG4gIGNvbnN0IGxlbmd0aCA9IFtdO1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgbGV0IHN1bmsgPSBmYWxzZTtcblxuICBjb25zdCBpc1N1bmsgPSAoKSA9PiB7XG4gICAgaWYgKGxlbmd0aC5sZW5ndGggPT09IHNpemUgJiYgbGVuZ3RoLmV2ZXJ5KChwYXJ0KSA9PiBwYXJ0ID09PSAnaGl0JykpIHtcbiAgICAgIHN1bmsgPSB0cnVlO1xuICAgICAgZXZlbnRzLnB1Ymxpc2goJ3N1bmsnLCBuYW1lKTtcbiAgICB9XG4gIH07XG5cbiAgY29uc3QgaGl0ID0gKCkgPT4ge1xuICAgIGlmIChsZW5ndGgubGVuZ3RoIDwgc2l6ZSkge1xuICAgICAgbGVuZ3RoLnB1c2goJ2hpdCcpO1xuICAgICAgY29uc29sZS5sb2cobGVuZ3RoLCBuYW1lKTtcbiAgICAgIGlzU3VuaygpO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4ge1xuICAgIGhpdCwgbGVuZ3RoLCBzdW5rLCBuYW1lLFxuICB9O1xufVxuXG5jb25zdCBtY2FycmllciA9IFNoaXAoJ21jYXJyaWVyJywgNSk7XG5jb25zdCBtYmF0dGxlc2hpcCA9IFNoaXAoJ21iYXR0bGVzaGlwJywgNCk7XG5jb25zdCBtZGVzdHJveWVyID0gU2hpcCgnbWRlc3Ryb3llcicsIDMpO1xuY29uc3QgbXN1Ym1hcmluZSA9IFNoaXAoJ21zdWJtYXJpbmUnLCAzKTtcbmNvbnN0IG1wYXRyb2wgPSBTaGlwKCdtcGF0cm9sJywgMik7XG5cbmNvbnN0IHBjYXJyaWVyID0gU2hpcCgncGNhcnJpZXInLCA1KTtcbmNvbnN0IHBiYXR0bGVzaGlwID0gU2hpcCgncGJhdHRsZXNoaXAnLCA0KTtcbmNvbnN0IHBkZXN0cm95ZXIgPSBTaGlwKCdwZGVzdHJveWVyJywgMyk7XG5jb25zdCBwc3VibWFyaW5lID0gU2hpcCgncHN1Ym1hcmluZScsIDMpO1xuY29uc3QgcHBhdHJvbCA9IFNoaXAoJ3BwYXRyb2wnLCAyKTtcblxuZXhwb3J0IHtcbiAgbWNhcnJpZXIsIG1iYXR0bGVzaGlwLCBtZGVzdHJveWVyLCBtc3VibWFyaW5lLCBtcGF0cm9sLCBwY2FycmllciwgcGJhdHRsZXNoaXAsIHBkZXN0cm95ZXIsXG4gIHBzdWJtYXJpbmUsIHBwYXRyb2wsXG59O1xuIiwiLyogZXNsaW50LWRpc2FibGUgbm8tcGx1c3BsdXMgKi9cbmltcG9ydCAqIGFzIHNoaXBzIGZyb20gJy4vc2hpcCc7XG5pbXBvcnQgZXZlbnRzIGZyb20gJy4vcHViU3ViJztcbmltcG9ydCBkb20gZnJvbSAnLi9kb20nO1xuXG5mdW5jdGlvbiBHYW1lQm9hcmQoKSB7XG4gIGNvbnN0IG1hdHJpeCA9IG5ldyBBcnJheSgxMCkuZmlsbCgwKS5tYXAoKCkgPT4gbmV3IEFycmF5KDEwKS5maWxsKDApKTtcblxuICBjb25zdCBwbGFjZVNoaXAgPSAoZ3JpZCwgbmFtZSwgc2l6ZSwgYXhpcykgPT4ge1xuICAgIGNvbnN0IGxpbmUgPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAxMCk7XG4gICAgY29uc3QgY29sID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMTApO1xuICAgIGNvbnN0IHBvc2l0aW9uID0gZ3JpZFtsaW5lXVtjb2xdO1xuICAgIGlmIChwb3NpdGlvbiA9PT0gMCkge1xuICAgICAgaWYgKGF4aXMgPT09ICd4JyAmJiAoc2l6ZSArIGNvbCkgPD0gZ3JpZFtsaW5lXS5sZW5ndGgpIHtcbiAgICAgICAgY29uc3QgdmVyaWZpY2F0aW9uQXJyYXkgPSBbXTtcbiAgICAgICAgZm9yIChsZXQgaSA9IGNvbDsgaSA8PSAoc2l6ZSArIGNvbCkgLSAxOyBpKyspIHtcbiAgICAgICAgICBpZiAoZ3JpZFtsaW5lXVtpXSA9PT0gMCkge1xuICAgICAgICAgICAgdmVyaWZpY2F0aW9uQXJyYXkucHVzaCgwKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHZlcmlmaWNhdGlvbkFycmF5Lmxlbmd0aCA9PT0gc2l6ZSAmJiB2ZXJpZmljYXRpb25BcnJheS5ldmVyeSgoeCkgPT4geCA9PT0gMCkpIHtcbiAgICAgICAgICBmb3IgKGxldCBpID0gY29sOyBpIDw9IChzaXplICsgY29sKSAtIDE7IGkrKykge1xuICAgICAgICAgICAgZ3JpZFtsaW5lXVtpXSA9IG5hbWU7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHBsYWNlU2hpcChncmlkLCBuYW1lLCBzaXplLCBheGlzKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChheGlzID09PSAneScgJiYgKHNpemUgKyBsaW5lKSA8PSBncmlkLmxlbmd0aCkge1xuICAgICAgICBjb25zdCB2ZXJpZmljYXRpb25BcnJheSA9IFtdO1xuICAgICAgICBmb3IgKGxldCBpID0gbGluZTsgaSA8PSAoc2l6ZSArIGxpbmUpIC0gMTsgaSsrKSB7XG4gICAgICAgICAgaWYgKGdyaWRbaV1bY29sXSA9PT0gMCkge1xuICAgICAgICAgICAgdmVyaWZpY2F0aW9uQXJyYXkucHVzaCgwKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHZlcmlmaWNhdGlvbkFycmF5Lmxlbmd0aCA9PT0gc2l6ZSAmJiB2ZXJpZmljYXRpb25BcnJheS5ldmVyeSgoeCkgPT4geCA9PT0gMCkpIHtcbiAgICAgICAgICBmb3IgKGxldCBpID0gbGluZTsgaSA8PSAoc2l6ZSArIGxpbmUpIC0gMTsgaSsrKSB7XG4gICAgICAgICAgICBncmlkW2ldW2NvbF0gPSBuYW1lO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwbGFjZVNoaXAoZ3JpZCwgbmFtZSwgc2l6ZSwgYXhpcyk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBsYWNlU2hpcChncmlkLCBuYW1lLCBzaXplLCBheGlzKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcGxhY2VTaGlwKGdyaWQsIG5hbWUsIHNpemUsIGF4aXMpO1xuICAgIH1cbiAgfTtcblxuICBjb25zdCByZWNlaXZlQXR0YWNrID0gKGdyaWQsIGxpbmUsIGNvbCwgYXJyYXkpID0+IHtcbiAgICBjb25zdCBwb3NpdGlvbiA9IGdyaWRbbGluZV1bY29sXTtcbiAgICBpZiAocG9zaXRpb24gIT09IDAgJiYgcG9zaXRpb24gIT09IDEpIHtcbiAgICAgIHNoaXBzW3Bvc2l0aW9uXS5oaXQoKTtcbiAgICAgIGFycmF5LmZvckVhY2goKGl0ZW0pID0+IHtcbiAgICAgICAgY29uc3QgbCA9IGl0ZW0uZ2V0QXR0cmlidXRlKCdkYXRhLWxpbmUnKTtcbiAgICAgICAgY29uc3QgYyA9IGl0ZW0uZ2V0QXR0cmlidXRlKCdkYXRhLWNvbCcpO1xuICAgICAgICBpZiAobCA9PSBsaW5lICYmIGMgPT0gY29sKSB7XG4gICAgICAgICAgaXRlbS5zdHlsZS5iYWNrZ3JvdW5kID0gJ3JlZCc7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBncmlkW2xpbmVdW2NvbF0gPSAxO1xuICAgICAgYXJyYXkuZm9yRWFjaCgoaXRlbSkgPT4ge1xuICAgICAgICBjb25zdCBsID0gaXRlbS5nZXRBdHRyaWJ1dGUoJ2RhdGEtbGluZScpO1xuICAgICAgICBjb25zdCBjID0gaXRlbS5nZXRBdHRyaWJ1dGUoJ2RhdGEtY29sJyk7XG4gICAgICAgIGlmIChsID09IGxpbmUgJiYgYyA9PSBjb2wpIHtcbiAgICAgICAgICBpdGVtLnN0eWxlLmJhY2tncm91bmQgPSAnYmx1ZSc7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcblxuICBjb25zdCBwc3Vua1NoaXBzID0gW107XG4gIGNvbnN0IG1zdW5rU2hpcHMgPSBbXTtcblxuICBldmVudHMuc3Vic2NyaWJlKCdzdW5rJywgZXZlbnRzLmV2ZW50cywgKG5hbWUpID0+IHtcbiAgICBpZiAobmFtZS5zbGljZSgwLCAxKSA9PT0gJ3AnKSB7XG4gICAgICBwc3Vua1NoaXBzLnB1c2gobmFtZSk7XG4gICAgfSBlbHNlIGlmIChuYW1lLnNsaWNlKDAsIDEpID09PSAnbScpIHtcbiAgICAgIG1zdW5rU2hpcHMucHVzaChuYW1lKTtcbiAgICB9XG4gICAgaWYgKHBzdW5rU2hpcHMubGVuZ3RoID09PSA1KSB7XG4gICAgICBkb20uc2VsZWN0LmdhbWVSZXN1bHRIMi50ZXh0Q29udGVudCA9ICdZb3UgbG9zdCEgVGhlIG1hY2hpbmUgYmVhdCB5b3UnO1xuICAgICAgZG9tLnNlbGVjdC5yZXNldEdhbWVEaXYuc3R5bGUuZGlzcGxheSA9ICdmbGV4JztcbiAgICB9IGVsc2UgaWYgKG1zdW5rU2hpcHMubGVuZ3RoID09PSA1KSB7XG4gICAgICBkb20uc2VsZWN0LnJlc2V0R2FtZURpdi5zdHlsZS5kaXNwbGF5ID0gJ2ZsZXgnO1xuICAgICAgZG9tLnNlbGVjdC5nYW1lUmVzdWx0SDIudGV4dENvbnRlbnQgPSAnQ29uZ3JhdHMhIFlvdSBiZWF0IHRoZSBNYWNoaW5lJztcbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiB7IHBsYWNlU2hpcCwgcmVjZWl2ZUF0dGFjaywgbWF0cml4IH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IEdhbWVCb2FyZDtcbiIsImltcG9ydCBHYW1lQm9hcmQgZnJvbSAnLi9nYW1lYm9hcmQnO1xuaW1wb3J0IGV2ZW50cyBmcm9tICcuL3B1YlN1Yic7XG5cbmV4cG9ydCBkZWZhdWx0IChmdW5jdGlvbiBkb20oKSB7XG4gIGNvbnN0IHNlbGVjdCA9IHtcbiAgICBncmlkMURpdjogZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmdyaWQtMScpLFxuICAgIGdyaWQyRGl2OiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuZ3JpZC0yJyksXG4gICAgcmVzZXRHYW1lRGl2OiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcucmVzZXQtZ2FtZScpLFxuICAgIGdhbWVSZXN1bHRIMjogZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmdhbWUtcmVzdWx0JyksXG4gICAgcmVzdGFydEJ1dHRvbjogZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnJlc3RhcnQtYnRuJyksXG4gICAgc2hpcHM6IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5zaGlwJyksXG4gICAgc2hpcHNEaXY6IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5zaGlwcycpLFxuICAgIGluaXRpYWxHcmlkOiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuaW5pdGlhbC1ncmlkJyksXG4gICAgcmFuZG9tQnRuOiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcucmFuZG9taXplLWJ0bicpLFxuICAgIHJlc2V0QnRuOiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcucmVzZXQtYnRuJyksXG4gICAgcm90YXRlQnRuOiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcucm90YXRlLWJ0bicpLFxuICAgIHN0YXJ0QnRuOiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuc3RhcnQtYnRuJyksXG4gICAgaW5pdGlhbEJnOiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuaW5pdGlhbC1zY3JlZW4tYmcnKSxcbiAgfTtcblxuICBmdW5jdGlvbiByZW5kZXJCb2FyZChtYXRyaXgsIGRpdiwgcGxheWVyLCBhcnJheSkge1xuICAgIHNlbGVjdC5ncmlkMURpdi50ZXh0Q29udGVudCA9ICcnO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbWF0cml4Lmxlbmd0aDsgaSsrKSB7XG4gICAgICBmb3IgKGxldCBqID0gMDsgaiA8IG1hdHJpeFtpXS5sZW5ndGg7IGorKykge1xuICAgICAgICBjb25zdCBzcXVhcmUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgc3F1YXJlLmNsYXNzTGlzdC5hZGQoJ3NxdWFyZScpO1xuICAgICAgICBzcXVhcmUuc2V0QXR0cmlidXRlKCdkYXRhLWNvb3JkJywgYCR7aX0ke2p9YCk7XG4gICAgICAgIHNxdWFyZS5zZXRBdHRyaWJ1dGUoJ2RhdGEtbGluZScsIGkpO1xuICAgICAgICBzcXVhcmUuc2V0QXR0cmlidXRlKCdkYXRhLWNvbCcsIGopO1xuICAgICAgICBkaXYuYXBwZW5kKHNxdWFyZSk7XG4gICAgICAgIGlmIChwbGF5ZXIgPT09ICdwbGF5ZXInIHx8IHBsYXllciA9PT0gJ2luaXRpYWwnKSB7XG4gICAgICAgICAgYXJyYXkucHVzaChzcXVhcmUpO1xuICAgICAgICAgIGlmIChtYXRyaXhbaV1bal0gPT09ICdwY2FycmllcicgfHwgbWF0cml4W2ldW2pdID09PSAncGJhdHRsZXNoaXAnIHx8IG1hdHJpeFtpXVtqXSA9PT0gJ3BkZXN0cm95ZXInIHx8IG1hdHJpeFtpXVtqXSA9PT0gJ3BzdWJtYXJpbmUnIHx8IG1hdHJpeFtpXVtqXSA9PT0gJ3BwYXRyb2wnKSB7XG4gICAgICAgICAgICBzcXVhcmUuc3R5bGUuYmFja2dyb3VuZCA9ICdncmV5JztcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAocGxheWVyID09PSAnbWFjaGluZScpIHtcbiAgICAgICAgICBhcnJheS5wdXNoKHNxdWFyZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHNlbGVjdCwgcmVuZGVyQm9hcmQsXG4gIH07XG59KCkpO1xuIiwiaW1wb3J0IEdhbWVCb2FyZCBmcm9tICcuL2dhbWVib2FyZCc7XG5pbXBvcnQgKiBhcyBzaGlwcyBmcm9tICcuL3NoaXAnO1xuaW1wb3J0IFBsYXllciBmcm9tICcuL3BsYXllcic7XG5pbXBvcnQgZG9tIGZyb20gJy4vZG9tJztcbmltcG9ydCBldmVudHMgZnJvbSAnLi9wdWJTdWInO1xuXG5leHBvcnQgZGVmYXVsdCAoZnVuY3Rpb24gZ2FtZUxvb3AoKSB7XG4gIGNvbnN0IG5ld0dhbWUgPSAoYm9hcmQpID0+IHtcbiAgICAvLyBjcmVhdGUgYm9hcmRzXG4gICAgY29uc3QgcGxheWVyQm9hcmQgPSBib2FyZDtcbiAgICBjb25zdCBtYWNoaW5lQm9hcmQgPSBHYW1lQm9hcmQoKTtcblxuICAgIGNvbnN0IHBsYXllclNxdWFyZXMgPSBbXTtcbiAgICBjb25zdCBtYWNoaW5lU3F1YXJlcyA9IFtdO1xuXG4gICAgLy8gUGxhY2UgbWFjaGluZSBzaGlwc1xuICAgIG1hY2hpbmVCb2FyZC5wbGFjZVNoaXAobWFjaGluZUJvYXJkLm1hdHJpeCwgJ21jYXJyaWVyJywgNSwgJ3gnKTtcbiAgICBtYWNoaW5lQm9hcmQucGxhY2VTaGlwKG1hY2hpbmVCb2FyZC5tYXRyaXgsICdtYmF0dGxlc2hpcCcsIDQsICd5Jyk7XG4gICAgbWFjaGluZUJvYXJkLnBsYWNlU2hpcChtYWNoaW5lQm9hcmQubWF0cml4LCAnbWRlc3Ryb3llcicsIDMsICd4Jyk7XG4gICAgbWFjaGluZUJvYXJkLnBsYWNlU2hpcChtYWNoaW5lQm9hcmQubWF0cml4LCAnbXN1Ym1hcmluZScsIDMsICd4Jyk7XG4gICAgbWFjaGluZUJvYXJkLnBsYWNlU2hpcChtYWNoaW5lQm9hcmQubWF0cml4LCAnbXBhdHJvbCcsIDIsICd4Jyk7XG5cbiAgICBkb20ucmVuZGVyQm9hcmQobWFjaGluZUJvYXJkLm1hdHJpeCwgZG9tLnNlbGVjdC5ncmlkMkRpdiwgJ21hY2hpbmUnLCBtYWNoaW5lU3F1YXJlcyk7XG4gICAgZG9tLnJlbmRlckJvYXJkKHBsYXllckJvYXJkLm1hdHJpeCwgZG9tLnNlbGVjdC5ncmlkMURpdiwgJ3BsYXllcicsIHBsYXllclNxdWFyZXMpO1xuXG4gICAgLy8gcm91bmRzXG4gICAgbWFjaGluZVNxdWFyZXMuZm9yRWFjaCgoc3FyKSA9PiB7XG4gICAgICBzcXIuc3R5bGUuY3Vyc29yID0gJ2Nyb3NzaGFpcic7XG4gICAgICBzcXIuYWRkRXZlbnRMaXN0ZW5lcignbW91c2VlbnRlcicsICgpID0+IHtcbiAgICAgICAgY29uc3QgbGluZSA9ICtzcXIuZ2V0QXR0cmlidXRlKCdkYXRhLWxpbmUnKTtcbiAgICAgICAgY29uc3QgY29sID0gK3Nxci5nZXRBdHRyaWJ1dGUoJ2RhdGEtY29sJyk7XG4gICAgICAgIGNvbnN0IHsgYmFja2dyb3VuZCB9ID0gc3FyLnN0eWxlO1xuICAgICAgICBpZiAobWFjaGluZUJvYXJkLm1hdHJpeFtsaW5lXVtjb2xdID09PSAxIHx8IGJhY2tncm91bmQgPT09ICdibHVlJyB8fCBiYWNrZ3JvdW5kID09PSAncmVkJykge1xuICAgICAgICAgIHNxci5zdHlsZS5jdXJzb3IgPSAnbm90LWFsbG93ZWQnO1xuICAgICAgICAgIGNvbnNvbGUubG9nKCdvY2N1cGllZCcpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHNxci5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgICAgICAgY29uc3QgbGluZSA9ICtzcXIuZ2V0QXR0cmlidXRlKCdkYXRhLWxpbmUnKTtcbiAgICAgICAgY29uc3QgY29sID0gK3Nxci5nZXRBdHRyaWJ1dGUoJ2RhdGEtY29sJyk7XG4gICAgICAgIGNvbnN0IHsgYmFja2dyb3VuZCB9ID0gc3FyLnN0eWxlO1xuICAgICAgICBpZiAobWFjaGluZUJvYXJkLm1hdHJpeFtsaW5lXVtjb2xdICE9PSAxICYmIGJhY2tncm91bmQgIT09ICdncmV5JyAmJiBiYWNrZ3JvdW5kICE9PSAncmVkJykge1xuICAgICAgICAgIGV2ZW50cy5wdWJsaXNoKCdtYWNoaW5lVHVybicsICcnKTtcbiAgICAgICAgICBtYWNoaW5lQm9hcmQucmVjZWl2ZUF0dGFjayhtYWNoaW5lQm9hcmQubWF0cml4LCBsaW5lLCBjb2wsIG1hY2hpbmVTcXVhcmVzKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBjb25zdCBtYWNoaW5lID0gUGxheWVyKCdNYWNoaW5lJyk7XG4gICAgZXZlbnRzLnN1YnNjcmliZSgnbWFjaGluZVR1cm4nLCBldmVudHMuZXZlbnRzLCAoKSA9PiB7XG4gICAgICBtYWNoaW5lLnJhbmRvbVBsYXkocGxheWVyQm9hcmQubWF0cml4KTtcbiAgICB9KTtcblxuICAgIGV2ZW50cy5zdWJzY3JpYmUoJ2F0dGFjaycsIGV2ZW50cy5ldmVudHMsICh2YWx1ZXMpID0+IHtcbiAgICAgIHBsYXllckJvYXJkLnJlY2VpdmVBdHRhY2socGxheWVyQm9hcmQubWF0cml4LCB2YWx1ZXMuckxpbmUsIHZhbHVlcy5yQ29sLCBwbGF5ZXJTcXVhcmVzKTtcbiAgICB9KTtcbiAgfTtcblxuICBkb20uc2VsZWN0LnJlc3RhcnRCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgd2luZG93LmxvY2F0aW9uLnJlbG9hZCgpO1xuICB9KTtcblxuICByZXR1cm4geyBuZXdHYW1lIH07XG59KCkpO1xuIiwiaW1wb3J0IGV2ZW50cyBmcm9tICcuL3B1YlN1Yic7XG5cbmZ1bmN0aW9uIFBsYXllcihuKSB7XG4gIGNvbnN0IG5hbWUgPSBuO1xuXG4gIGNvbnN0IHJhbmRvbVBsYXkgPSAobWF0cml4KSA9PiB7XG4gICAgbGV0IHJMaW5lID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMTApO1xuICAgIGxldCByQ29sID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMTApO1xuICAgIGxldCBwb3NpdGlvbiA9IG1hdHJpeFtyTGluZV1bckNvbF07XG5cbiAgICBpZiAocG9zaXRpb24gPT09ICdoaXQnIHx8IHBvc2l0aW9uID09PSAxKSB7XG4gICAgICB3aGlsZSAocG9zaXRpb24gPT09ICdoaXQnIHx8IHBvc2l0aW9uID09PSAxKSB7XG4gICAgICAgIHJMaW5lID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMTApO1xuICAgICAgICByQ29sID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMTApO1xuICAgICAgICBwb3NpdGlvbiA9IG1hdHJpeFtyTGluZV1bckNvbF07XG4gICAgICB9XG4gICAgICBpZiAocG9zaXRpb24gPT09ICdwY2FycmllcicgfHwgcG9zaXRpb24gPT09ICdwYmF0dGxlc2hpcCcgfHwgcG9zaXRpb24gPT09ICdwZGVzdHJveWVyJyB8fCBwb3NpdGlvbiA9PT0gJ3BzdWJtYXJpbmUnIHx8IHBvc2l0aW9uID09PSAncHBhdHJvbCcpIHtcbiAgICAgICAgZXZlbnRzLnB1Ymxpc2goJ2F0dGFjaycsIHsgckxpbmUsIHJDb2wgfSk7XG4gICAgICAgIG1hdHJpeFtyTGluZV1bckNvbF0gPSAnaGl0JztcbiAgICAgIH0gZWxzZSBpZiAocG9zaXRpb24gPT09IDApIHtcbiAgICAgICAgZXZlbnRzLnB1Ymxpc2goJ2F0dGFjaycsIHsgckxpbmUsIHJDb2wgfSk7XG4gICAgICAgIG1hdHJpeFtyTGluZV1bckNvbF0gPSAxO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAocG9zaXRpb24gPT09ICdwY2FycmllcicgfHwgcG9zaXRpb24gPT09ICdwYmF0dGxlc2hpcCcgfHwgcG9zaXRpb24gPT09ICdwZGVzdHJveWVyJyB8fCBwb3NpdGlvbiA9PT0gJ3BzdWJtYXJpbmUnIHx8IHBvc2l0aW9uID09PSAncHBhdHJvbCcpIHtcbiAgICAgIGV2ZW50cy5wdWJsaXNoKCdhdHRhY2snLCB7IHJMaW5lLCByQ29sIH0pO1xuICAgICAgbWF0cml4W3JMaW5lXVtyQ29sXSA9ICdoaXQnO1xuICAgIH0gZWxzZSBpZiAocG9zaXRpb24gPT09IDApIHtcbiAgICAgIGV2ZW50cy5wdWJsaXNoKCdhdHRhY2snLCB7IHJMaW5lLCByQ29sIH0pO1xuICAgICAgbWF0cml4W3JMaW5lXVtyQ29sXSA9IDE7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiB7IHJhbmRvbVBsYXkgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgUGxheWVyO1xuIiwiaW1wb3J0IEdhbWVCb2FyZCBmcm9tICcuL2dhbWVib2FyZCc7XG5pbXBvcnQgZG9tIGZyb20gJy4vZG9tJztcbmltcG9ydCBldmVudHMgZnJvbSAnLi9wdWJTdWInO1xuaW1wb3J0IGdhbWVMb29wIGZyb20gJy4vZ2FtZSc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHN0YXJ0R2FtZSgpIHtcbiAgY29uc3QgaW5pdGlhbEJvYXJkID0gR2FtZUJvYXJkKCk7XG5cbiAgY29uc3QgaW5pdGlhbEJvYXJkU3F1YXJlcyA9IFtdO1xuXG4gIGRvbS5yZW5kZXJCb2FyZChpbml0aWFsQm9hcmQubWF0cml4LCBkb20uc2VsZWN0LmluaXRpYWxHcmlkLCAnaW5pdGlhbCcsIGluaXRpYWxCb2FyZFNxdWFyZXMpO1xuXG4gIGxldCBzaXplID0gMDtcbiAgbGV0IG5hbWU7XG4gIGxldCBheGlzID0gJ3gnO1xuXG4gIGZ1bmN0aW9uIHJhbmRvbUludGVnZXIobWluLCBtYXgpIHtcbiAgICByZXR1cm4gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogKG1heCAtIG1pbiArIDEpKSArIG1pbjtcbiAgfVxuXG4gIGRvbS5zZWxlY3QucmFuZG9tQnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGV2ZW50KSA9PiB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBpbml0aWFsQm9hcmQubWF0cml4Lmxlbmd0aDsgaSsrKSB7XG4gICAgICBmb3IgKGxldCBqID0gMDsgaiA8IGluaXRpYWxCb2FyZC5tYXRyaXhbaV0ubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgaW5pdGlhbEJvYXJkLm1hdHJpeFtpXVtqXSA9IDA7XG4gICAgICB9XG4gICAgfVxuICAgIGRvbS5zZWxlY3QuaW5pdGlhbEdyaWQudGV4dENvbnRlbnQgPSAnJztcbiAgICBjb25zdCBheGlzID0gWyd4JywgJ3knXTtcbiAgICBpbml0aWFsQm9hcmQucGxhY2VTaGlwKGluaXRpYWxCb2FyZC5tYXRyaXgsICdwY2FycmllcicsIDUsIGF4aXNbcmFuZG9tSW50ZWdlcigwLCAxKV0pO1xuICAgIGluaXRpYWxCb2FyZC5wbGFjZVNoaXAoaW5pdGlhbEJvYXJkLm1hdHJpeCwgJ3BiYXR0bGVzaGlwJywgNCwgYXhpc1tyYW5kb21JbnRlZ2VyKDAsIDEpXSk7XG4gICAgaW5pdGlhbEJvYXJkLnBsYWNlU2hpcChpbml0aWFsQm9hcmQubWF0cml4LCAncGRlc3Ryb3llcicsIDMsIGF4aXNbcmFuZG9tSW50ZWdlcigwLCAxKV0pO1xuICAgIGluaXRpYWxCb2FyZC5wbGFjZVNoaXAoaW5pdGlhbEJvYXJkLm1hdHJpeCwgJ3BzdWJtYXJpbmUnLCAzLCBheGlzW3JhbmRvbUludGVnZXIoMCwgMSldKTtcbiAgICBpbml0aWFsQm9hcmQucGxhY2VTaGlwKGluaXRpYWxCb2FyZC5tYXRyaXgsICdwcGF0cm9sJywgMiwgYXhpc1tyYW5kb21JbnRlZ2VyKDAsIDEpXSk7XG5cbiAgICBkb20ucmVuZGVyQm9hcmQoaW5pdGlhbEJvYXJkLm1hdHJpeCwgZG9tLnNlbGVjdC5pbml0aWFsR3JpZCwgJ2luaXRpYWwnLCBpbml0aWFsQm9hcmRTcXVhcmVzKTtcbiAgICBkb20uc2VsZWN0LnNoaXBzRGl2LnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gIH0pO1xuXG4gIGRvbS5zZWxlY3QucmVzZXRCdG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgd2luZG93LmxvY2F0aW9uLnJlbG9hZCgpO1xuICB9KTtcblxuICBkb20uc2VsZWN0LnN0YXJ0QnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgIGNvbnN0IHNoaXBzID0gW107XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBpbml0aWFsQm9hcmQubWF0cml4Lmxlbmd0aDsgaSsrKSB7XG4gICAgICBmb3IgKGxldCBqID0gMDsgaiA8IGluaXRpYWxCb2FyZC5tYXRyaXhbaV0ubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgaWYgKGluaXRpYWxCb2FyZC5tYXRyaXhbaV1bal0gPT09ICdwY2FycmllcicgfHwgaW5pdGlhbEJvYXJkLm1hdHJpeFtpXVtqXSA9PT0gJ3BkZXN0cm95ZXInIHx8IGluaXRpYWxCb2FyZC5tYXRyaXhbaV1bal0gPT09ICdwYmF0dGxlc2hpcCcgfHwgaW5pdGlhbEJvYXJkLm1hdHJpeFtpXVtqXSA9PT0gJ3BzdWJtYXJpbmUnIHx8IGluaXRpYWxCb2FyZC5tYXRyaXhbaV1bal0gPT09ICdwcGF0cm9sJykge1xuICAgICAgICAgIHNoaXBzLnB1c2goaW5pdGlhbEJvYXJkLm1hdHJpeFtpXVtqXSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHNoaXBzLmluY2x1ZGVzKCdwY2FycmllcicpICYmIHNoaXBzLmluY2x1ZGVzKCdwYmF0dGxlc2hpcCcpICYmIHNoaXBzLmluY2x1ZGVzKCdwZGVzdHJveWVyJykgJiYgc2hpcHMuaW5jbHVkZXMoJ3BzdWJtYXJpbmUnKSAmJiBzaGlwcy5pbmNsdWRlcygncHBhdHJvbCcpKSB7XG4gICAgICBkb20uc2VsZWN0LmluaXRpYWxCZy5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgICAgZ2FtZUxvb3AubmV3R2FtZShpbml0aWFsQm9hcmQpO1xuICAgIH0gZWxzZSB7XG4gICAgICBhbGVydCgnUGxhY2UgeW91ciBTaGlwcyEnKTtcbiAgICB9XG4gIH0pO1xuXG4gIGRvbS5zZWxlY3Qucm90YXRlQnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgIGlmIChheGlzID09PSAneCcpIHtcbiAgICAgIGF4aXMgPSAneSc7XG4gICAgICBkb20uc2VsZWN0LnNoaXBzRGl2LmNsYXNzTGlzdC5hZGQoJ3knKTtcbiAgICAgIGRvbS5zZWxlY3Quc2hpcHNEaXYuY2xhc3NMaXN0LnJlbW92ZSgneCcpO1xuICAgIH0gZWxzZSB7XG4gICAgICBheGlzID0gJ3gnO1xuICAgICAgZG9tLnNlbGVjdC5zaGlwc0Rpdi5jbGFzc0xpc3QuYWRkKCd4Jyk7XG4gICAgICBkb20uc2VsZWN0LnNoaXBzRGl2LmNsYXNzTGlzdC5yZW1vdmUoJ3knKTtcbiAgICB9XG4gIH0pO1xuXG4gIGV2ZW50cy5zdWJzY3JpYmUoJ2dldFNpemUnLCBldmVudHMuZXZlbnRzLCAob2JqKSA9PiB7XG4gICAgc2l6ZSA9ICtvYmoucztcbiAgICBuYW1lID0gb2JqLm47XG4gIH0pO1xuXG4gIGRvbS5zZWxlY3Quc2hpcHMuZm9yRWFjaCgoc2hpcCkgPT4ge1xuICAgIHNoaXAuYWRkRXZlbnRMaXN0ZW5lcignZHJhZ3N0YXJ0JywgKGV2ZW50KSA9PiB7XG4gICAgICBjb25zdCBuID0gZXZlbnQudGFyZ2V0LmdldEF0dHJpYnV0ZSgnaWQnKTtcbiAgICAgIGNvbnN0IHMgPSBldmVudC50YXJnZXQuZ2V0QXR0cmlidXRlKCdkYXRhLXNpemUnKTtcbiAgICAgIGV2ZW50cy5wdWJsaXNoKCdnZXRTaXplJywgeyBuLCBzIH0pO1xuICAgIH0pO1xuICB9KTtcblxuICBpbml0aWFsQm9hcmRTcXVhcmVzLmZvckVhY2goKHNxcikgPT4ge1xuICAgIHNxci5hZGRFdmVudExpc3RlbmVyKCdkcmFnZW50ZXInLCAoZXZlbnQpID0+IHtcbiAgICAgIGNvbnN0IGdyaWQgPSBpbml0aWFsQm9hcmQubWF0cml4O1xuICAgICAgY29uc3QgbGluZSA9ICtldmVudC50YXJnZXQuZ2V0QXR0cmlidXRlKCdkYXRhLWxpbmUnKTtcbiAgICAgIGNvbnN0IGNvbCA9ICtldmVudC50YXJnZXQuZ2V0QXR0cmlidXRlKCdkYXRhLWNvbCcpO1xuICAgICAgaWYgKGdyaWRbbGluZV1bY29sXSAhPT0gMCAmJiBzcXIuc3R5bGUuYmFja2dyb3VuZCAhPT0gJ3doaXRlJykge1xuICAgICAgICBldmVudC50YXJnZXQucmV0dXJuVmFsdWUgPSB0cnVlO1xuICAgICAgICBzcXIuYWRkRXZlbnRMaXN0ZW5lcignZHJhZ292ZXInLCAoZXZlbnQpID0+IHtcbiAgICAgICAgICBldmVudC50YXJnZXQucmV0dXJuVmFsdWUgPSB0cnVlO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIGlmIChheGlzID09PSAneCcgJiYgKHNpemUgKyBjb2wpIDw9IGdyaWRbbGluZV0ubGVuZ3RoICYmIGdyaWRbbGluZV1bY29sXSA9PT0gMCkge1xuICAgICAgICBjb25zdCB2ZXJpZmljYXRpb25BcnJheSA9IFtdO1xuICAgICAgICBmb3IgKGxldCBpID0gY29sOyBpIDw9IChzaXplICsgY29sKSAtIDE7IGkrKykge1xuICAgICAgICAgIGlmIChncmlkW2xpbmVdW2ldID09PSAwKSB7XG4gICAgICAgICAgICB2ZXJpZmljYXRpb25BcnJheS5wdXNoKDApO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAodmVyaWZpY2F0aW9uQXJyYXkubGVuZ3RoID09PSBzaXplICYmIHZlcmlmaWNhdGlvbkFycmF5LmV2ZXJ5KCh4KSA9PiB4ID09PSAwKSkge1xuICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgc3FyLmFkZEV2ZW50TGlzdGVuZXIoJ2RyYWdvdmVyJywgKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGF4aXMgPT09ICd5JyAmJiAoc2l6ZSArIGxpbmUpIDw9IGdyaWQubGVuZ3RoKSB7XG4gICAgICAgIGNvbnN0IHZlcmlmaWNhdGlvbkFycmF5ID0gW107XG4gICAgICAgIGZvciAobGV0IGkgPSBsaW5lOyBpIDw9IChzaXplICsgbGluZSkgLSAxOyBpKyspIHtcbiAgICAgICAgICBpZiAoZ3JpZFtpXVtjb2xdID09PSAwKSB7XG4gICAgICAgICAgICB2ZXJpZmljYXRpb25BcnJheS5wdXNoKDApO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAodmVyaWZpY2F0aW9uQXJyYXkubGVuZ3RoID09PSBzaXplICYmIHZlcmlmaWNhdGlvbkFycmF5LmV2ZXJ5KCh4KSA9PiB4ID09PSAwKSkge1xuICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgc3FyLmFkZEV2ZW50TGlzdGVuZXIoJ2RyYWdvdmVyJywgKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBzcXIuYWRkRXZlbnRMaXN0ZW5lcignZHJvcCcsIChldmVudCkgPT4ge1xuICAgICAgY29uc3QgZ3JpZCA9IGluaXRpYWxCb2FyZC5tYXRyaXg7XG4gICAgICBjb25zdCBsaW5lID0gK2V2ZW50LnRhcmdldC5nZXRBdHRyaWJ1dGUoJ2RhdGEtbGluZScpO1xuICAgICAgY29uc3QgY29sID0gK2V2ZW50LnRhcmdldC5nZXRBdHRyaWJ1dGUoJ2RhdGEtY29sJyk7XG4gICAgICBpZiAoYXhpcyA9PT0gJ3gnKSB7XG4gICAgICAgIGZvciAobGV0IGkgPSBjb2w7IGkgPD0gKHNpemUgKyBjb2wpIC0gMTsgaSsrKSB7XG4gICAgICAgICAgY29uc3Qgc3F1YXJlTiA9IGAke2xpbmV9JHtpfWA7XG4gICAgICAgICAgZ3JpZFtsaW5lXVtpXSA9IG5hbWU7XG4gICAgICAgICAgaW5pdGlhbEJvYXJkU3F1YXJlc1src3F1YXJlTl0uc3R5bGUuYmFja2dyb3VuZCA9ICdncmV5JztcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChheGlzID09PSAneScpIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IGxpbmU7IGkgPD0gKHNpemUgKyBsaW5lKSAtIDE7IGkrKykge1xuICAgICAgICAgIGdyaWRbaV1bY29sXSA9IG5hbWU7XG4gICAgICAgICAgY29uc3Qgc3F1YXJlTiA9IGAke2l9JHtjb2x9YDtcbiAgICAgICAgICBpbml0aWFsQm9hcmRTcXVhcmVzWytzcXVhcmVOXS5zdHlsZS5iYWNrZ3JvdW5kID0gJ2dyZXknO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBkb20uc2VsZWN0LnNoaXBzLmZvckVhY2goKHNoaXApID0+IHtcbiAgICAgICAgaWYgKHNoaXAuZ2V0QXR0cmlidXRlKCdpZCcpID09PSBuYW1lKSB7XG4gICAgICAgICAgc2hpcC5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgcmV0dXJuIHsgaW5pdGlhbEJvYXJkIH07XG59XG4iLCJpbXBvcnQgJy4vc3R5bGUuY3NzJztcbmltcG9ydCBkb20gZnJvbSAnLi9kb20uanMnO1xuaW1wb3J0IGdhbWVMb29wIGZyb20gJy4vZ2FtZS5qcyc7XG5pbXBvcnQgc3RhcnRHYW1lIGZyb20gJy4vc3RhcnRHYW1lJztcblxuc3RhcnRHYW1lKCk7XG4iXSwibmFtZXMiOlsiX19fQ1NTX0xPQURFUl9FWFBPUlRfX18iLCJwdXNoIiwibW9kdWxlIiwiaWQiLCJleHBvcnRzIiwiY3NzV2l0aE1hcHBpbmdUb1N0cmluZyIsImxpc3QiLCJ0b1N0cmluZyIsInRoaXMiLCJtYXAiLCJpdGVtIiwiY29udGVudCIsIm5lZWRMYXllciIsImNvbmNhdCIsImxlbmd0aCIsImpvaW4iLCJpIiwibW9kdWxlcyIsIm1lZGlhIiwiZGVkdXBlIiwic3VwcG9ydHMiLCJsYXllciIsInVuZGVmaW5lZCIsImFscmVhZHlJbXBvcnRlZE1vZHVsZXMiLCJrIiwiX2siLCJjc3NNYXBwaW5nIiwiYnRvYSIsImJhc2U2NCIsInVuZXNjYXBlIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiSlNPTiIsInN0cmluZ2lmeSIsImRhdGEiLCJzb3VyY2VNYXBwaW5nIiwic291cmNlVVJMcyIsInNvdXJjZXMiLCJzb3VyY2UiLCJzb3VyY2VSb290Iiwic3R5bGVzSW5ET00iLCJnZXRJbmRleEJ5SWRlbnRpZmllciIsImlkZW50aWZpZXIiLCJyZXN1bHQiLCJtb2R1bGVzVG9Eb20iLCJvcHRpb25zIiwiaWRDb3VudE1hcCIsImlkZW50aWZpZXJzIiwiYmFzZSIsImNvdW50IiwiaW5kZXhCeUlkZW50aWZpZXIiLCJvYmoiLCJjc3MiLCJzb3VyY2VNYXAiLCJyZWZlcmVuY2VzIiwidXBkYXRlciIsImFkZEVsZW1lbnRTdHlsZSIsImJ5SW5kZXgiLCJzcGxpY2UiLCJhcGkiLCJkb21BUEkiLCJ1cGRhdGUiLCJuZXdPYmoiLCJyZW1vdmUiLCJsYXN0SWRlbnRpZmllcnMiLCJuZXdMaXN0IiwiaW5kZXgiLCJuZXdMYXN0SWRlbnRpZmllcnMiLCJfaSIsIl9pbmRleCIsIm1lbW8iLCJpbnNlcnQiLCJzdHlsZSIsInRhcmdldCIsInN0eWxlVGFyZ2V0IiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwid2luZG93IiwiSFRNTElGcmFtZUVsZW1lbnQiLCJjb250ZW50RG9jdW1lbnQiLCJoZWFkIiwiZSIsImdldFRhcmdldCIsIkVycm9yIiwiYXBwZW5kQ2hpbGQiLCJlbGVtZW50IiwiY3JlYXRlRWxlbWVudCIsInNldEF0dHJpYnV0ZXMiLCJhdHRyaWJ1dGVzIiwic3R5bGVFbGVtZW50Iiwibm9uY2UiLCJzZXRBdHRyaWJ1dGUiLCJpbnNlcnRTdHlsZUVsZW1lbnQiLCJzdHlsZVRhZ1RyYW5zZm9ybSIsImFwcGx5IiwicGFyZW50Tm9kZSIsInJlbW92ZUNoaWxkIiwicmVtb3ZlU3R5bGVFbGVtZW50Iiwic3R5bGVTaGVldCIsImNzc1RleHQiLCJmaXJzdENoaWxkIiwiY3JlYXRlVGV4dE5vZGUiLCJfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18iLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJjYWNoZWRNb2R1bGUiLCJfX3dlYnBhY2tfbW9kdWxlc19fIiwibiIsImdldHRlciIsIl9fZXNNb2R1bGUiLCJkIiwiYSIsImRlZmluaXRpb24iLCJrZXkiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwicHJvcCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsInIiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsInZhbHVlIiwibmMiLCJldmVudHMiLCJzdWJzY3JpYmUiLCJldmVudE5hbWUiLCJvYmplY3QiLCJjYWxsYmFjayIsInVuc3Vic2NyaWJlIiwicHVibGlzaCIsImZvckVhY2giLCJpbnN0YW5jZSIsIlNoaXAiLCJzaXplIiwibmFtZSIsInN1bmsiLCJoaXQiLCJjb25zb2xlIiwibG9nIiwiZXZlcnkiLCJwYXJ0IiwibWNhcnJpZXIiLCJtYmF0dGxlc2hpcCIsIm1kZXN0cm95ZXIiLCJtc3VibWFyaW5lIiwibXBhdHJvbCIsInBjYXJyaWVyIiwicGJhdHRsZXNoaXAiLCJwZGVzdHJveWVyIiwicHN1Ym1hcmluZSIsInBwYXRyb2wiLCJtYXRyaXgiLCJBcnJheSIsImZpbGwiLCJwbGFjZVNoaXAiLCJncmlkIiwiYXhpcyIsImxpbmUiLCJNYXRoIiwiZmxvb3IiLCJyYW5kb20iLCJjb2wiLCJ2ZXJpZmljYXRpb25BcnJheSIsIngiLCJwc3Vua1NoaXBzIiwibXN1bmtTaGlwcyIsInNsaWNlIiwiZG9tIiwic2VsZWN0IiwiZ2FtZVJlc3VsdEgyIiwidGV4dENvbnRlbnQiLCJyZXNldEdhbWVEaXYiLCJkaXNwbGF5IiwicmVjZWl2ZUF0dGFjayIsImFycmF5IiwicG9zaXRpb24iLCJsIiwiZ2V0QXR0cmlidXRlIiwiYyIsImJhY2tncm91bmQiLCJncmlkMURpdiIsImdyaWQyRGl2IiwicmVzdGFydEJ1dHRvbiIsInNoaXBzIiwicXVlcnlTZWxlY3RvckFsbCIsInNoaXBzRGl2IiwiaW5pdGlhbEdyaWQiLCJyYW5kb21CdG4iLCJyZXNldEJ0biIsInJvdGF0ZUJ0biIsInN0YXJ0QnRuIiwiaW5pdGlhbEJnIiwicmVuZGVyQm9hcmQiLCJkaXYiLCJwbGF5ZXIiLCJqIiwic3F1YXJlIiwiY2xhc3NMaXN0IiwiYWRkIiwiYXBwZW5kIiwiYWRkRXZlbnRMaXN0ZW5lciIsImxvY2F0aW9uIiwicmVsb2FkIiwibmV3R2FtZSIsImJvYXJkIiwicGxheWVyQm9hcmQiLCJtYWNoaW5lQm9hcmQiLCJwbGF5ZXJTcXVhcmVzIiwibWFjaGluZVNxdWFyZXMiLCJzcXIiLCJjdXJzb3IiLCJtYWNoaW5lIiwicmFuZG9tUGxheSIsInJMaW5lIiwickNvbCIsInZhbHVlcyIsImluaXRpYWxCb2FyZCIsImluaXRpYWxCb2FyZFNxdWFyZXMiLCJyYW5kb21JbnRlZ2VyIiwibWluIiwibWF4IiwiZXZlbnQiLCJpbmNsdWRlcyIsImdhbWUiLCJhbGVydCIsInMiLCJzaGlwIiwicmV0dXJuVmFsdWUiLCJwcmV2ZW50RGVmYXVsdCIsInNxdWFyZU4iLCJzdGFydEdhbWUiXSwic291cmNlUm9vdCI6IiJ9
